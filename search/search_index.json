{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenidxs :)","text":"<p>En este lugar iremos cargando las clases, ejercicios y otros recursos que servir\u00e1n como la documentaci\u00f3n del curso de programaci\u00f3n de la UB Polito Arcushin del a\u00f1o 2025.</p> <p>La idea es que puedan recurrir a estas p\u00e1ginas para refrescar conceptos entre clases y tener ejercicios a mano para practicar.</p> <p>Como ya hemos dicho muchas veces: todos es perfectible, as\u00ed que no duden en buscar errores  o cosas que no quedan claras  y avisarnos para que podamos revisar los contenidos.</p> <p>\u00a1Esperamos que aprendan cosas nuevas, se les ocurran ideas extravagantes y sobre todo que disfruten la experiencia de pensar con otrxs!</p> <p>Abel, Mariana, Cami y Manu </p>"},{"location":"ejercicios_iniciales/","title":"Ejercicios Iniciales","text":"<ol> <li> <p>Crear un proyecto en la IDE NetBeans. Usando la funci\u00f3n System.out.print();  Hacer estos dos mensajes: System.out.print(\"Curso de Java\"); System.out.println(\" en la Polito\");</p> </li> <li> <p>Crear un proyecto nuevo en la IDE NetBeans. Usando la funci\u00f3n System.out.print();  Mostrar por consola el mensaje: Estudiamos Java</p> </li> <li> <p>En otro proyecto y usando la misma funci\u00f3n System.out.print(); mostrar estos mensajes  primero: Mostramos por segundo: consola tercero: el cuarto: mensaje del quinto: proyecto</p> </li> <li> <p>En el ejercicio anterior la salida por consola aparace casi inentendible \u00bfComo podemos hacer para que sea legible? </p> </li> <li> <p>Tomando los mensajes del ejercicio 2 \u00bfQue variante de la funci\u00f3n System.out.print();  podemos usar para que cada mensaje se imprima en una l\u00ednea debajo de la otra?</p> </li> <li> <p>Tomando los mensajes del ejercicio 2:  primero: Mostramos por segundo: consola tercero: el cuarto: mensaje del quinto: proyecto</p> </li> </ol> <p>Mostrar: Por consola mostramos el mensaje del proyecto.</p> <ol> <li>En un proyecto nuevo ejecut\u00e1 este c\u00f3digo en nuestra IDE </li> </ol> <p>public static void main(String[], args) {     System.out.println(\"Hola Mundo\";);</p> <p>}</p> <p>\u00bfGenera alg\u00fan error? Si es as\u00ed \u00bfComo se soluciona ese error?</p> <ol> <li>Si usamos la funci\u00f3n para imprimir mensajes por consola: System.out.print(); de la siguiente manera: </li> </ol> <p>public static void main(String[], args) {</p> <pre><code>System.out.print(\"Curso de programacion\"); System.out.print(\" en la polito\");\n</code></pre> <p>}</p> <p>\u00bfNos devuelve alg\u00fan error? Si es as\u00ed \u00bfSe puede resolver?</p>"},{"location":"clase_00/","title":"Clase 0: Historia de la programaci\u00f3n y fundamentos.","text":""},{"location":"clase_01/","title":"\u00bfQu\u00e9 es un programa? | Fases de desarrollo | estructura y sintaxis","text":""},{"location":"clase_01/#breve-repaso","title":"Breve repaso","text":"<p>En la clase pasada hab\u00edamos llegado a una definici\u00f3n para la acci\u00f3n de programar. Vimos que programar no era exclusivo de la inform\u00e1tica, sino una forma de pensar (l\u00f3gica) para elaborar una serie de instrucciones (algoritmo) que ser\u00e1n ejecutadas por una m\u00e1quina o sistema.</p> \u00bfQu\u00e9 es programar? <p>Programar es una forma de pensar para elaborar una serie de instrucciones que ser\u00e1n ejecutadas por un sistema.</p> \u00bfQu\u00e9 es un algoritmo? <ul> <li>Un algoritmo es una creaci\u00f3n humana.</li> <li>Se lo puede definir como una serie de instrucciones ordenadas o una lista ordenada de pasos para lograr un objetivo.</li> <li>Ejemplos cl\u00e1sicos: Una receta de cocina \ud83d\udcd6\ud83e\udd63, un manual para armar un mueble \ud83d\uddd2\ufe0f, tomarse el colectivo </li> </ul> <p>Vimos tambi\u00e9n qu\u00e9 era un lenguaje de programaci\u00f3n: una forma de escribir esas instrucciones. Y los categorizamos por algunas de sus posibles caracter\u00edsticas: por su forma de ejecuci\u00f3n, por su nivel de rigurosidad en su sint\u00e1xis y sem\u00e1ntica, por sus paradigmas y por su nivel de abstracci\u00f3n.</p> <p>Vimos tambi\u00e9n que los lenguajes de programaci\u00f3n de \"alto nivel\" intentan arrimarse al lenguaje humano y, al igual que ese, tienen una serie de reglas de sintaxis y sem\u00e1ntica con las que hay que cumplir para que, al fin de cuentas, la m\u00e1quina pueda ejecutar nuestras instrucciones de la manera en que las pensamos.</p> Los lenguajes de programaci\u00f3n <ul> <li>Un lenguaje de programaci\u00f3n es una forma de escribir instrucciones.</li> <li>Se los suele agrupar por sus caracter\u00edsticas distintivas.</li> <li>Al igual que el lenguaje humano, cada lenguaje tiene reglas sint\u00e1cticas y sem\u00e1nticas.</li> </ul> <p>A partir de estas definiciones, ya podemos adentrarnos en dilucidar\u2026 \u00bfqu\u00e9 es entonces un programa?</p>"},{"location":"clase_01/#programa","title":"Programa","text":"<p>La palabra programa puede hacer referencia a muchas cosas no tan dis\u00edmiles como aparentan: Un programa de una materia de la facu, un programa de televisi\u00f3n, un programa pol\u00edtico (quienes tengan cercan\u00eda a espacios de discusi\u00f3n pol\u00edtica, habr\u00e1n notado los constantes reclamos de la existencia de dicha cosa), etc\u2026</p> <p>Como podr\u00e1n observar, todas esas acepciones de la palabra \"programa\" son bastante similares: Es un conjunto ordenado de t\u00f3picos que se deben seguir en el orden establecido y de una forma m\u00e1s o menos constante.</p> <p>Pues bien, entonces un programa inform\u00e1tico no es m\u00e1s que una seguidilla de sentencias que se ejecutan desde el inicio hasta el final (ya veremos un poco m\u00e1s esto), realizando as\u00ed las acciones que definimos dentro de ese programa.</p> \u00bfQu\u00e9 es un programa? <p>Un programa inform\u00e1tico es un conjunto de sentencias que se ejecutan desde el inicio hasta el final realizando as\u00ed las acciones definidas.</p>"},{"location":"clase_01/#fases-de-desarrollo","title":"Fases de desarrollo","text":"<p>Esto lo veremos en detalle m\u00e1s adelante cuando veamos ejercicios de problemas, pero vale la pena mencionarlo aqu\u00ed para tener una idea general de las fases que tiene el desarrollo de un programa.</p> <p>\u00bfPor qu\u00e9 insistimos tanto en esto de que programar no es exclusivamente escribir c\u00f3digo en un lenguaje elegido? La programaci\u00f3n empieza mucho antes de sentarse a escribir: se arranca siempre pensando un problema, antes incluso de pensar en c\u00f3mo resolverlo. Recuerden que dijimos en la primera clase que programar es pensar en soluciones creativas para problemas complejos.</p> <p>Es decir, primero vamos a intentar descomponer el problema en pasos l\u00f3gicos y ordenados, luego vamos a imaginar y dise\u00f1ar soluciones posibles y, finalmente como \u00faltimo paso, vamos a traducir esas soluciones a c\u00f3digo en el lenguaje que hayamos elegido.</p> Fases de desarrollo <ol> <li>Descomponer el problema en pasos l\u00f3gicos y ordenados</li> <li>Imaginar y dise\u00f1ar las soluciones posibles</li> <li>Traducir las soluciones elegidas a c\u00f3digo</li> </ol>"},{"location":"clase_01/#estructura-de-un-programa","title":"Estructura de un programa","text":"<p>Vamos a ver c\u00f3mo se ve un programita b\u00e1sico (\"Hola Mundo\"<sup>1</sup>) para intentar descomponer su estructura.</p> <pre><code>package holamundo;\n\n/**\n *\n * @author nombre\n */\npublic class HolaMundo {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO: el c\u00f3digo a ejecutar viene ac\u00e1 abajo.\n        System.out.print(\"\u00a1Hola mundo!\");\n    }\n}\n</code></pre> <p>Descomponemos el programa:</p> <ul> <li>Vemos que hay l\u00edneas de texto</li> <li>Las l\u00edneas parecieran estar agrupadas en \"bloques\"</li> <li>Hay llaves que \"engloban\" l\u00edneas</li> <li>Hay par\u00e9ntesis que \"abrazan\" palabras</li> <li>Hay unas l\u00edneas \"especiales\" que empiezan con s\u00edmbolos: barras y asteriscos (<code>/**</code> <code>//</code>)</li> <li>La l\u00ednea que imprime el texto (<code>System.out.print()</code>), \"ya viene\" con el lenguaje.</li> </ul>"},{"location":"clase_01/#sentencias-y-bloques","title":"Sentencias y bloques","text":"<p>Las l\u00edneas de nuestro programa son\u2026 \u00a1las sentencias! Una sentencia es una representaci\u00f3n de la acci\u00f3n que nuestro programa debe ejecutar.</p> <p>A la agrupaci\u00f3n de l\u00edneas de c\u00f3digo que conforman una sola sentencia, las llamaremos bloques.</p>"},{"location":"clase_01/#llaves-y-parentesis","title":"Llaves y par\u00e9ntesis","text":"<p>Las llaves son las que construyen la estructura del c\u00f3digo, delimitando los bloques. Indican que todo lo que est\u00e1 entre la llave de apertura (<code>{</code>) y la de clausura (<code>}</code>) \"pertence\" a la l\u00ednea que antecede inmediatamente a la apertura.</p> <p>En nuestro ejemplo tenemos dos \"conjuntos\" de llaves:</p> <p><pre><code>public class HolaMundo {\n    // Hay cosas ac\u00e1 adentro.\n    // Y todas pertenecen a esta clase (class) p\u00fablica (public) llamada HolaMundo.\n}\n</code></pre> <pre><code>public static void main(String[] args) {\n    // Hay cosas ac\u00e1 adentro.\n    // Y todas pertenecen esta funci\u00f3n p\u00fablica y est\u00e1tica (static) llamada main.\n}\n</code></pre></p> <p>Los par\u00e9ntesis tambi\u00e9n cumplen la funci\u00f3n de agrupar, pero a diferencia de las llaves no conforman bloques, sino algo similar a un agrupamiento de palabras o incluso una palabra sola.</p> <p>Veremos esto m\u00e1s en detalle cuando veamos \"Funciones\" (que se suele representar: <code>f(x)</code>) pero por ahora recordemos que lo que est\u00e1 dentro de un par\u00e9ntesis \"pertenece\" a la palabra o expresi\u00f3n que antecede inmediatamente el de apertura <code>(</code>.</p> <pre><code>/**\n *\n * @author nombre\n */\npublic class HolaMundo {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO: el c\u00f3digo a ejecutar viene ac\u00e1 abajo.\n        System.out.print(\"\u00a1Hola mundo!\");\n    }\n}\n</code></pre>"},{"location":"clase_01/#indentacion","title":"Indentaci\u00f3n","text":"<p>El espacio en blanco que vemos antes de las l\u00edneas de c\u00f3digo es la indentaci\u00f3n o el indentado. En la sintaxis de los lenguajes humanos esto se conoce como sangr\u00eda. En el caso de Java la indentaci\u00f3n no tiene importancia sint\u00e1ctica ni sem\u00e1ntica, peeeero es importante respetarla porque facilita visualmente la comprensi\u00f3n y la identificaci\u00f3n de los bloques.</p>"},{"location":"clase_01/#comentarios","title":"Comentarios","text":"<p>Un comentario es una l\u00ednea de texto que no es ejecutada, es una nota que agrega quien escribe el programa para hacer aclaraciones sobre ese c\u00f3digo. Pueden ser notas sobre la funcionalidad (qu\u00e9 hace), o para facilitar la comprensi\u00f3n de la soluci\u00f3n implementada (c\u00f3mo lo hace).</p> <p>Es una buena pr\u00e1ctica utilizar los comentarios para \"documentar\" nuestro c\u00f3digo y as\u00ed facilitar que otras personas puedan modificarlo (o incluso para nuestro yo del futuro :) ).</p>"},{"location":"clase_01/#ciclo-del-programa-inicio-proceso-final","title":"Ciclo del programa: Inicio, proceso, final.","text":"<p>Veremos esto en clase cuando \"corramos\"  nuestro programa, pero dejamos aqu\u00ed una definici\u00f3n muy esquem\u00e1tica de un ciclo.</p> <p>Analicemos el ciclo:</p> <ul> <li>Inicio: Punto de entrada (o entrypoint en ingl\u00e9s)</li> <li>Proceso: Una vez que se carg\u00f3 en memoria, el c\u00f3digo es ejecutado y el sistema operativo gestionar\u00e1 los recursos del   entorno (asignando recursos, comunicando con dispositivos de entrada y salida, archivos, etc\u2026).</li> <li>Final: C\u00f3digo de salida.</li> </ul>"},{"location":"clase_01/#tipos-de-datos-y-valores","title":"Tipos de datos y valores","text":"<p>Los tipos de datos clasifican datos seg\u00fan sus caracter\u00edsticas espec\u00edficas. Los valores son los datos en s\u00ed mismos (y pertenecer\u00e1n a un tipo u otro). Entenderemos un poco m\u00e1s el concepto de valor y dato cuando veamos Variables.</p> <p>Recuerdan que en la primera clase vimos que hab\u00eda lenguajes fuertemente tipados o d\u00e9bilmente tipados, esta caract\u00e9ristica de los lenguajes har\u00e1 que en nuestro programa debamos explicitar (o no) el tipo de dato que vamos a manipular. Veamos entonces ahora los tipos de datos llamados primitivos o elementales que nos ofrece Java.</p>"},{"location":"clase_01/#tipos-primitivos","title":"Tipos primitivos","text":"<p>Los \"tipos primitivos\"<sup>2</sup>, a veces llamados tambi\u00e9n Tipos Elementales, son los tipos de datos originales de cada lenguaje. Es decir que cada lenguaje ya nos proporciona esos tipos y as\u00ed tambi\u00e9n los define:</p> <ol> <li>Qu\u00e9 tipo de dato se puede representar (n\u00fameros -enteros o decimales-, caract\u00e9res -letras y s\u00edmbolos-, etc\u2026)</li> <li>Sus rangos de valores posibles</li> <li>Y por lo anterior entonces tambi\u00e9n se define el espacio que ocupar\u00e1n en memoria los datos pertenecientes a cada    tipo</li> </ol> <p>Recordemos que las m\u00e1quinas solamente \"entienden\" datos que llamamos binarios, esto quiere decir que s\u00f3lo pueden ejecutar unos y ceros. Por lo tanto, para las m\u00e1quinas todo ser\u00e1 una combinaci\u00f3n de esos dos valores a los que definimos como bits: Un bit puede tener un valor de 1 o de 0.</p> <p>Esto lo tenemos que tener claro para entender como se definen los tipos de datos primitivos.</p> <p>Aprovechemos el primer tipo de datos para profundizar en esto:</p>"},{"location":"clase_01/#byte-byte-anglicismo-u-octeto","title":"byte (byte -anglicismo- u octeto)","text":"<p>Es un tipo de dato que representa una estructura de 8 bits. O sea, es el conjunto de 8 bits:</p> <pre><code>byte = 00000000\n</code></pre> <p>Este tipo de dato puede almacenar valores num\u00e9ricos enteros que van desde -128 hasta 127 (ambos inclusive).</p> <p>Ustedes se preguntar\u00e1n \u00bfc\u00f3mo es que eso sucede? bueno, la maquina construye los n\u00fameros alternando <code>1</code> y <code>0</code> en esa sucesi\u00f3n de bits.</p> <p>Por ejemplo, lo que escribimos m\u00e1s arriba: <code>byte = 00000000</code> para la m\u00e1quina representa <code>0</code>. O sea, nosotros escribimos un <code>0</code> en el teclado y la m\u00e1quina lo \"traducir\u00e1\" a ese conjunto de (8) bits. Si nosotros escribimos un 5, la m\u00e1quina lo traducir\u00e1 como <code>00000101</code>. Como pueden ver siguen siendo 8 bits, lo que cambian son las posiciones que tienen un <code>1</code> o un <code>0</code>.</p> <p>Todo esto es importante porque les da la dimensi\u00f3n de lo que ocupan en memoria los datos.</p> <p>Cuando nosotros creamos un dato, la computadora reserva en memoria el tama\u00f1o mayor que puede llegar a alcanzar ese dato. En el ejemplo que estamos usando, un byte, la m\u00e1quina va a reservar 8 bits (8 lugares para poner unos y ceros).</p> <p>Entonces es importante que antes de crear datos pensemos qu\u00e9 valores vamos a querer manejar.</p>"},{"location":"clase_01/#short-entero-corto","title":"short (entero corto)","text":"<p>Representa un tipo de dato de 16 bits. O sea, que usar\u00e1 el doble de memoria que nuestro tipo anterior: <code>00000000 00000000</code>.</p> <p>Puede almacenar valores num\u00e9ricos enteros desde -32.768 hasta 32.767. Por supuesto tambi\u00e9n lo hace combinando <code>1</code>s y <code>0</code>s en esas 16 posiciones.</p>"},{"location":"clase_01/#int-entero","title":"int (entero)","text":"<p>Este tipo de dato puede almacenar valores num\u00e9ricos enteros de 32 bits, o sea 4 veces nuestro primer dato <code>00000000</code> Los valores van desde -2<sup>31</sup> hasta 2<sup>31</sup>-1. Como pueden ver, el tama\u00f1o del n\u00famero que permite manejar en mucho m\u00e1s grande.</p> <p>Podemos trabajar con n\u00fameros un poco superiores a los 2 mill millones -2.147.483.648 y 2.147.483.647.</p>"},{"location":"clase_01/#long-entero-largo","title":"long (entero largo)","text":"<p>Es un tipo de datos de 64 bits o sea 8 veces nuestro primer tipo de dato: <code>00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000</code> Y puede almacenar n\u00fameros enteros que van desde -2<sup>63</sup> hasta 2<sup>63</sup>-1. Como se puede imaginar es extremadamente grande: 9.223372 \u00d7 10<sup>18</sup></p>"},{"location":"clase_01/#float-coma-flotante-o-real","title":"float (coma flotante o 'real')","text":"<p>Es un tipo de dato de 32 bits, como el int, pero permite manejar n\u00fameros com coma flotante. Por ejemplo <code>16,4</code> o <code>1879223,45</code>. Estos n\u00fameros son los que usualmente se conocen como \"decimales\".</p> <p>Este tipo de dato tiene una precisi\u00f3n simple, esto es algo que veremos m\u00e1s adelante, pero por el momento alcanza con saber que no debe ser utilizado si vamos a necesitar n\u00fameros con alta precisi\u00f3n (es decir, lo podemos usar para aplicaciones gr\u00e1ficas o videojuegos, pero no para informaci\u00f3n cient\u00edfica o financiera).</p>"},{"location":"clase_01/#double-coma-flotante-doble-o-real-largo","title":"double (coma flotante doble o 'real largo')","text":"<p>En este caso es un tipo de dato de 64 bits, como el long, pero permite manejar n\u00fameros con coma flotante, como el float.</p> <p>Las diferencias entre el float y double son:</p> <ul> <li>El rango num\u00e9rico (es el doble)</li> <li>La precisi\u00f3n (es, tambi\u00e9n, el doble)   Al ser un n\u00famero decimal su \"exactitud\" depende de la cantidad de d\u00edgitos que puede manejar despu\u00e9s de la coma. Por eso,   el tipo de dato \"double\" tiene el doble de precisi\u00f3n que el \"float\".</li> </ul>"},{"location":"clase_01/#boolean-booleano-anglicismo-o-logico","title":"boolean (booleano -anglicismo- o l\u00f3gico)","text":"<p>Este es un tipo de dato de un bit que representa verdadero (en ingl\u00e9s \"true\") o falso (en ingl\u00e9s \"false\") (que tambi\u00e9n podr\u00eda ser s\u00ed o no, 1 o 0, lleno o vac\u00edo, etc\u2026).</p> <p>Se los llama as\u00ed porque est\u00e1 basado en el \u00e1lgebra \"booleana\", del fil\u00f3sofo y matem\u00e1tico ingl\u00e9s George Boole.</p>"},{"location":"clase_01/#char-caracter-o-simbolo","title":"char (car\u00e1cter o s\u00edmbolo)","text":"<p>Es un tipo de dato que representa un car\u00e1cter Unicode de 16 bits. Se utiliza mucho el tipo de dato char para manejar un s\u00edmbolo o una letra (\u00a1que es en \u00faltima instancia un s\u00edmbolo!) y no un fragmento de texto.</p>"},{"location":"clase_01/#string-cadena-de-texto","title":"String (cadena de texto)","text":"<p>Este tipo de dato lo ponemos como primitivo \u00a1pero no lo es! Lo incluimos aqu\u00ed porque es tan utilizado como los primitivos.</p> <p>En principio hay que observar que empieza con una may\u00fascula. En casi todos los lenguajes de programaci\u00f3n orientada a objetos esto tiene un significado importante. Por ahora podemos decir que cuando tenemos que trabajar con textos (frases o palabras), usamos este tipo de dato.</p>"},{"location":"clase_01/#tipos-primitivos-tabla","title":"Tipos primitivos - Tabla","text":"Tipos primitivos de JAVA Tipo Traducci\u00f3n Memoria utilizada Rango de valores Breve descripci\u00f3n byte Byte u Octeto (raro) 1 byte (8 bits) de -128 a 127 Representaci\u00f3n de un n\u00famero entero positivo o negativo. short Entero corto 2 byte (16 bits) de -32.768 a 32.767 Representaci\u00f3n de un entero positivo o negativo con rango corto. int Entero 4 byte (32 bits) de -2<sup>31</sup> a 2<sup>31</sup>-1 Representaci\u00f3n de un entero est\u00e1ndar. long Entero largo 8 byte (64 bits) de -2<sup>63</sup> a 2<sup>63</sup>-1 Representaci\u00f3n de un entero de rango ampliado. float Coma flotante o Real 4 byte (32 bits) de -10<sup>32</sup> a 10<sup>32</sup> Representaci\u00f3n de un n\u00famero real est\u00e1ndar. La precisi\u00f3n del dato contenido var\u00eda en funci\u00f3n del tama\u00f1o del n\u00famero: la precisi\u00f3n se amplia con n\u00fameros m\u00e1s pr\u00f3ximos a 0 y disminuye cuanto m\u00e1s se aleja del mismo. double Real largo 8 byte (64 bits) de -10<sup>300</sup> a 10<sup>300</sup> Representaci\u00f3n de un n\u00famero real con mucha precisi\u00f3n. char Car\u00e1cter 2 byte (16 bits) de '\\u0000' a '\\uffff' Car\u00e1cter o s\u00edmbolo. Recordar que para utilizar una \"cadena de texto\" se debe usar la clase String. boolean Booleano o L\u00f3gico 1 bit true - false Representa una 'posici\u00f3n' l\u00f3gica con dos valores posibles: verdadero (true) o falso (false)"},{"location":"clase_01/#operadores","title":"Operadores","text":"<p>Los operadores son s\u00edmbolos o palabras que utilizamos para manipular y combinar expresiones. Son elemento que nos permiten realizar, como su nombre lo indica, operaciones como:</p> <ul> <li>Comparaciones</li> <li>Procedimientos l\u00f3gicos</li> <li>C\u00e1lculos aritm\u00e9ticos</li> <li>Asignaciones</li> </ul>"},{"location":"clase_01/#operadores-relacionales","title":"Operadores relacionales","text":"<p>Utilizamos los operadores relacionales cuando necesitamos comparar dos elementos o valores.</p> <p>Dependiendo el operador que usemos tendremos que tener en cuenta, o no, la posici\u00f3n de los elementos con relaci\u00f3n al operador.</p> OPERADOR DESCRIPCI\u00d3N EJEMPLO <code>==</code> Es igual a == b <code>!=</code> Es distinto a != b <code>&lt;</code> Menor que a &lt; b <code>&gt;</code> Mayor que a &gt; b <code>&lt;=</code> Menor o igual que a &lt;= b <code>&gt;=</code> Mayor o igual que a &gt;= b <p>Es decir, decir que <code>a == b</code> es lo mismo que decir que <code>b == a</code>, sin embargo, no ser\u00eda lo mismo intercambiar los operandos cuando hacemos una comparaci\u00f3n o relaci\u00f3n mayor/menor: <code>a &lt; b</code> no es lo mismo que <code>b &lt; a</code>.</p>"},{"location":"clase_01/#operadores-logicos","title":"Operadores l\u00f3gicos","text":"<p>A diferencia de los relacionales que comparan elementos o valores, los operadores l\u00f3gicos combinan operaciones booleanas.</p> <p>Son muy utilizados en estructuras condicionadles y loops, que veremos m\u00e1s adelante, para combinar condiciones y obtener luego un resultado.</p> OPERADOR DESCRIPCI\u00d3N EJEMPLO EJEMPLO COTIDIANO <code>&amp;&amp;</code> Y (de adici\u00f3n) si [condici\u00f3n] Y [otra condici\u00f3n] Agarro la campera si hace fr\u00edo Y llueve <code>||</code> O (de exclusi\u00f3n) si [condici\u00f3n] U [otra condici\u00f3n] Agarro la campera si hace fr\u00edo O llueve <code>!</code> NO (de negaci\u00f3n) si NO [condici\u00f3n] Dejo la campera si NO hace fr\u00edo <p>Cuando usamos los operadores <code>&amp;&amp;</code> si nuestra primera condici\u00f3n devuelve falso o usando el comparador <code>||</code> sin nuestra primera condici\u00f3n devuelve verdadero , en ambos casos la segunda condici\u00f3n no se evaluar\u00e1.</p> <p>Los operadores de negaci\u00f3n simplemente invierten un valor l\u00f3gico.</p>"},{"location":"clase_01/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<p>Los operadores aritm\u00e9ticos se utilizan para realizar operaciones matem\u00e1ticas b\u00e1sicas.</p> OPERADOR DESCRIPCI\u00d3N <code>+</code> Adici\u00f3n <code>-</code> Resta <code>*</code> Multiplicaci\u00f3n <code>/</code> Divisi\u00f3n <code>%</code> M\u00f3dulo"},{"location":"clase_01/#operadores-de-asignacion","title":"Operadores de asignaci\u00f3n","text":"<p>Los operadores de asignaci\u00f3n se utilizan para asignar valores a las variables.</p> OPERADOR DESCRIPCI\u00d3N <code>=</code> Asignaci\u00f3n simple <code>+=</code> A\u00f1adir y asignar <code>-=</code> `Restar y asignar <code>*=</code> Multiplica y asigna <code>/=</code> Divide y asigna <code>%=</code> M\u00f3dulo y asignar <ol> <li> <p>\"Hola, mundo\" en inform\u00e1tica es un programa que muestra el texto \u00abHola, mundo\u00bb en un dispositivo de visualizaci\u00f3n, en la mayor\u00eda de los casos la pantalla de un monitor. Este programa suele ser usado como introducci\u00f3n al estudio de un lenguaje de programaci\u00f3n, siendo un primer ejercicio t\u00edpico considerado fundamental desde el punto de vista did\u00e1ctico.\u00a0\u21a9</p> </li> <li> <p>En todos los elementos de Java vamos a ver que estos reciben nombres en ingl\u00e9s. Junto a cada tipo vamos a poner su traducci\u00f3n en castellano para entenderlos, pero cuando los utilicemos siempre tendr\u00e1 que ser con su nombre ingl\u00e9s.\u00a0\u21a9</p> </li> </ol>"},{"location":"clase_01/ejercicios/","title":"Ejercicios para la clase 01","text":"<p>En esta clase vimos c\u00f3mo crear nuestro primer programa (HolaMundo) y como hacer para que nos imprima algo en la consola del IDE.</p> <p>Primeros pasos para estos ejercicios:</p> <ol> <li>Abrir la IDE (Netbeans)</li> <li>Crear un nuevo programa (o abrir uno existente)<ol> <li>Si est\u00e1s creando uno nuevo, acordate de seleccionar la opci\u00f3n \"Java with Ant\".</li> </ol> </li> </ol>"},{"location":"clase_01/ejercicios/#ejercicio-1","title":"Ejercicio 1","text":"<p>Usando las herramientas del sistema (<code>System.out.print</code>), impriman un texto en la consola de Netbeans.</p> <p>Y ahora jueguen usando los operadores. Por ejemplo, podemos sumar dos cadenas de texto.</p> <p><pre><code>System.out.print(\"Hola,\" + \" \" + \"\u00bfqu\u00e9 tal?\");\n</code></pre> Podemos tambi\u00e9n sumar o \"juntar\" caracteres:</p> <pre><code>// No me acuerdo ni uno, pero https://www.unicode.org/charts/script/chart_Symbol-Other.html\nSystem.out.println(\"H\" + '\\u2665' + \"l\" + \"u\");\n\nSystem.out.println(\"Venceremos \" + '\\u270C');\n\nSystem.out.println(\"Extra\u00f1o la \" + '\\u00F1');\n</code></pre>"},{"location":"clase_01/ejercicios/#ejercicio-2","title":"Ejercicio 2","text":"<p>Utilicen el otro m\u00e9todo para imprimir mensajes, para que agregue un salto de l\u00ednea cuando termina el texto (<code>System.out.println</code>).</p> <p>Esto nos va a venir bien para que no nos quede todos los mensajes ah\u00ed amontonados en una s\u00f3la l\u00ednea :)</p> <p>\u00bfQu\u00e9 otro operador se puede usar con cadenas de texto? \u00bfPodremos dividir, restar o multiplicar?</p> <p>Hagan la prueba, cuando Java no sepa qu\u00e9 hacer con el operador y la cadena, se los va a decir en forma de error cuando compilen.</p>"},{"location":"clase_01/ejercicios/#sugerencias","title":"Sugerencias:","text":"<ul> <li>Prueben usando operadores relacionales.</li> </ul>"},{"location":"clase_01/ejercicios/#ejercicio-3","title":"Ejercicio 3","text":"<p>Usando este \u00faltimo m\u00e9todo, prueben imprimir mensajes de texto y prueben tambi\u00e9n si pueden hacer cuentas y comparar valores.</p> <p>Recuerden que si queremos imprimir texto usamos las comillas envolviendo el texto, pero los n\u00fameros y operadores deben ir por fuera de las comillas.</p> <p>Ponemos ac\u00e1 ejemplos para que se gu\u00eden, pero \u00a1no los copien tal cual! Inventen cualquiera cosa, sin miedo, que la mejor manera de aprender es insistir en el error, tratar de entenderlo y despu\u00e9s arreglarlo para llegar al resultado esperado :)</p> <p>Unos ejemplos b\u00e1sicos para arrancar:</p> <pre><code>// Multiplicamos y comparamos.\nSystem.out.println(2*3 == 6);\n\nSystem.out.println(2*3 == 2 + 2 + 2);\n\n// Comparamos dos cadenas. \nSystem.out.println(\"peras\" == \"manzanas\");\n\n// Atenti al uso de los par\u00e9ntesis.\nSystem.out.println(\"\u00bflas peras NO son manzanas? \" + (\"peras\" != \"manzanas\"));\n</code></pre> <pre><code>// Multiplicamos.\nSystem.out.println(2*3);\n</code></pre> <p>Prueben ahora agregarle una cadena de texto (string):</p> <pre><code>   // Agregamos texto a la cuenta.\n   System.out.print(\"Se sabe que 2 x 3 es: \" +    2*3);\n//         ^                    ^            ^     ^\n//M\u00e9todo pa' imprimir    Cadena de texto     OP   Cuentita\n</code></pre> <p>Bueno, parece que todo marcha bien, probemos qu\u00e9 pasa si en lugar de multiplicar sumamos\u2026</p> <pre><code>// Agregamos texto a la cuenta.\nSystem.out.print(\"Todo el mundo sabe que habr\u00e1 un 5: \" + 2 + 3);\n</code></pre> <p> \u00a1\u00bfQu\u00e9 pasooo\u00f3?!  </p> <p>Les dejamos este interrogante para que traten de entender por qu\u00e9 no sum\u00f3, sino que \"junt\u00f3\" los n\u00fameros.</p>"},{"location":"clase_01/ejercicios/#pistas","title":"\ud83d\udd75\ud83c\udffd\u200d\u2640\ufe0f Pistas:","text":"<ul> <li>Cuando multiplicamos, todo sali\u00f3 como esperamos. \u00bfCu\u00e1l puede ser la diferencia?</li> <li>\u00bfSe acuerdan de matem\u00e1tica y las precedencias (o el \"orden de evaluaci\u00f3n\")? Algo muy parecido est\u00e1 pasando ac\u00e1.</li> </ul> <p>Un peque\u00f1o adelanto: Esta herramienta que usamos se descomopone en:</p> <ul> <li><code>System</code> --&gt; Es una clase (<code>class</code>) de la librer\u00eda Java. De all\u00ed su nombre \"sistema\".</li> <li><code>out</code> --&gt; Es un attributo (o campo) de la clase. Esta palabra es \"salida\" en espa\u00f1ol. Bastante clarito su nombre :)</li> <li><code>print</code> y <code>println</code> son dos m\u00e9todos de la clase. Print es \"imprimir\" y println probablemente sea la contracci\u00f3n de \"imprimir l\u00ednea\". Es decir que termina la l\u00ednea escribiendo una l\u00ednea nueva (lo que nosotrxs hacemos cuando apretamos la tecla enter). </li> </ul>"},{"location":"clase_02/","title":"Clase 02: Variables + Expresiones","text":"<p>En esta clase veremos qu\u00e9 son las variables y constantes, aprenderemos a definirlas y usarlas junto con los elementos que vimos hasta ahora (nuestros tipos primitivos, cadenas de texto o <code>String</code> y operadores). Veremos tambi\u00e9n a qu\u00e9 se llama \"expresi\u00f3n\" y c\u00f3mo las construimos.</p>"},{"location":"clase_02/#variables","title":"Variables","text":"<p>Una variable es un contenedor en el que se guarda un valor o dato. Ser\u00eda algo similar a una caja donde metemos un valor y a la que le ponemos una etiqueta en el frente. La etiqueta es el nombre o, t\u00e9cnicamente hablando, el identificador de la variable, que nos va a permitir acceder a ella (y as\u00ed a su valor), manipularla y reutilizarla.</p> <p>Las variables nos permiten reutilizar valores tantas veces como queramos sin tener que estar repitiendo ese valor cada vez. El nombre de la variable se convierte entonces en una representaci\u00f3n del valor que le asignamos (atenci\u00f3n a esta palabrita).</p> <p>Por otro lado, y como lo indica su nombre, las variables pueden cambiar su valor a lo largo de nuestro programa. Por ejemplo, una variable <code>nombre</code> puede tener un valor inicial de \"Juan Domingo\" y luego ese valor puede transformarse en \"Cristina\".</p> Variable <p>Una variable es un elemento en el que podemos almacenar datos.</p> <ul> <li>Tienen un identificador (o nombre) </li> <li>Su valor puede modificarse a lo largo de la ejecuci\u00f3n del programa </li> <li>En Java, debemos especificar su tipo </li> </ul> <p>\u00bfC\u00f3mo creamos entonces una variable? Bien sencillo, vamos a escribir el nombre o identificador de nuestra variable, pero \u00a1OJO!  En Java, al ser un lenguaje de tipado estricto, debemos adem\u00e1s decirle al sistema qu\u00e9 tipo de dato vamos a querer guardar ah\u00ed. Esto se llama en programaci\u00f3n declaraci\u00f3n de variables. Porque al crearla estamos tambi\u00e9n declarando su tipo y comprometi\u00e9ndonos con el sistema a s\u00f3lo guardar valores que sean admitidos por ese tipo. Veamos:</p> <p>Imaginemos que estamos trabajando en un sistema que manejar\u00e1 la compra de entradas en una sala de teatro, y necesitamos entonces en alg\u00fan momento de nuestro programa definir y guardar la cantidad total de asientos que tiene la sala.</p> <pre><code>byte totalAsientos;\n</code></pre> <p>Con esa l\u00ednea ya estamos declarando nuestra variable y le estamos diciendo al sistema que <code>totalAsientos</code> tendr\u00e1 un valor del tipo <code>byte</code>. El sistema entonces nos tomar\u00e1 la palabra y reservar\u00e1 en memoria ese cachito de espacio min\u00fasculo que requiere un byte. Noten como nuestra l\u00ednea termina con un punto y coma. Eso forma parte de la sintaxis de Java y lo veremos m\u00e1s adelante cuando veamos Expresiones.</p> <p>Vamos ahora a asignarle un valor a nuestra flamante variable. \u00bfLes suena de alg\u00fan lado esa palabra \"asignar\"? Ciertamente, ya la hab\u00edamos visto cuando vimos Operadores, as\u00ed que usaremos el operador de asignaci\u00f3n (<code>=</code>) para asignarle un valor:</p> <pre><code>byte totalAsientos; // --&gt; Aqu\u00ed la declaramos.\n\ntotalAsientos = 125; // --&gt; Aqu\u00ed le asignamos un valor.\n</code></pre> <p>Vean como cuando la declaramos, debemos definir su tipo, pero luego cuando queremos asignarle un valor, simplemente ponemos su identificador seguido del operador de asignaci\u00f3n y el valor.</p> <p>Estas dos l\u00edneas de c\u00f3digo tambi\u00e9n se pueden sintetizar en una sola si queremos declarar nuestra variable Y asignarle un valor en el mismo momento, simplemente unimos las dos sentencias:</p> <pre><code>  byte totalAsientos  =  125;\n//  ^        ^        ^   ^\n// TIPO    NOMBRE     OP  VAL\n</code></pre> <p>De esta manera estaremos declarando nuestra variable de tipo byte y le asignaremos un valor num\u00e9rico de 125.</p> <p>Usando nuestro primer ejemplo con cadenas podemos ver como es que se le cambia el valor a una variable:</p> <pre><code>      String nombre = \"Juan Domingo\";\n      System.out.println(\"Nombre inicial: \" + nombre);\n      // Ac\u00e1 pasan cosas.\n      System.out.println(\"Pasan muchos a\u00f1os y muchas cosas...\");\n      nombre = \"Cristina\";\n      System.out.println(\"Nombre luego: \" + nombre);\n</code></pre>"},{"location":"clase_02/#atencion-maxima","title":"Atenci\u00f3n m\u00e1xima","text":"<p>Ahora bien, \u00bfqu\u00e9 pasa si un tiempo despu\u00e9s nos llaman de la sala de teatro y nos dicen que remodelaron la sala y la ampliaron, que ahora tiene 300 butacas? Bueno, en principio si nos ca\u00edan bien nos vamos a poner contentxs, y luego buscaremos nuestro c\u00f3digo e iremos a modificar nuestra variable que ten\u00eda el total de asientos para actualizarla con el nuevo valor. Pareciera tan sencillo como encontrar la l\u00ednea donde la declaramos y simplemente cambiar el n\u00famero:</p> <pre><code>byte totalAsientos  =  300;\n</code></pre> <p>Prueben declarar esta variable de este modo ^ a ver qu\u00e9 sucede  . Por m\u00e1s que la diferencia sea muy chiquita  para Java ese no es un valor v\u00e1lido.</p> <p>Cuando decimos que el valor de la variable puede cambiar y el sistema no nos va a reprochar nada, pues las variables var\u00edan\u2026 debemos prestar mucha atenci\u00f3n a un tema ya a esta altura recurrente: Java es un lenguaje estricto con sus tipos de datos.</p> <p>Ya nos hab\u00edamos comprometido con el sistema a guardar valores de tipo byte en nuestra variable <code>totalAsientos</code>, y el sistema ya nos hab\u00eda reservado ese espacio en memoria, pero resulta que <code>300</code> \u00a1no es un valor v\u00e1lido en el tipo <code>byte</code>! (1)</p> <ol> <li>Rango de valores v\u00e1lidos de byte: [-128 .. 127].</li> </ol> <p>As\u00ed que si intentamos cambiar el valor inicial de nuestra variable a 300 lo que suceder\u00e1 es que el sistema simplemente no nos va a dejar y nos indicar\u00e1 el error <sup>1</sup>.</p> <p>Por eso es importante siempre intentar anticiparse a este tipo de cambios o, dicho de otra forma, no confiarse en que las especificaciones no cambiar\u00e1n. Siempre ser\u00e1 mejor trabajar con tipos de datos que tengan un buen margen para esos cambios.</p> <p>En este ejemplo que dimos queda muy evidente que nos estamos \"pasando\" porque simplemente le asignamos un valor m\u00e1s alto cuando declaramos la variable, pero imaginen el siguiente ejemplo en donde una variable <code>totalEntradas</code> no tiene un valor definido por nosotrxs 'a mano', sino que hay una serie de operaciones que definen su valor. Por ejemplo:</p> <pre><code>byte totalEntradas;\n\n// Unas cosas muy interesantes que hace nuestro programa.\n\nbyte entradasVendidas = estoVieneDeUnCalculoComplejo;\nbyte invitaciones = estoVieneDeOtroCalculo;\n\ntotalEntradas = entradasVendidas + invitaciones;\n</code></pre> <p>Si la operaci\u00f3n de suma que determina el valor de nuestra variable es un n\u00famero entero m\u00e1s grande que 127, vamos a estar en problemas.</p> <p>Para situaciones muy espec\u00edficas en donde necesitamos explicitar que una variable no puede cambiar su valor, es decir, para declarar variables que no var\u00edan (\u00a1qu\u00e9 contradicci\u00f3n!) podemos hacer uso de otro elemento. Esos elementos se llaman \"constantes\".</p>"},{"location":"clase_02/#constantes","title":"Constantes","text":"<p>Las constantes son un tipo especial de variable. Y su nombre ya nos dice qu\u00e9 es lo que ser\u00e1 diferente en este elemento: su mutabilidad. Evidentemente, las constantes son\u2026 constantes y no pueden variar su valor a lo largo del programa.</p> Constantes <p>Las constantes son un contenedor en el que podemos guardar datos o valores.</p> <ul> <li>Tienen un identificador </li> <li>Su valor es inalterable durante toda la ejecuci\u00f3n del programa </li> <li>En Java, debemos especificar su tipo </li> </ul> <p>Cualquier dato que no cambie es buen candidato para guardarse en una constante. Ejemplos:</p> <ul> <li>El n\u00famero pi (<code>\u03c0</code>)</li> <li>La cantidad de meses que tiene un a\u00f1o</li> <li>La velocidad de la luz</li> <li>La burgues\u00eda Argentina :P</li> </ul> <p>La declaraci\u00f3n de las constantes es igual a la de las variables, pero le tenemos que sumar una palabra que las definir\u00e1 como constantes: <code>final</code>. Veamos unos ejemplos.</p> <pre><code>// Declaramos las constantes porque hay cosas que nunca cambian (\u00bf?).\nfinal double NUMERO_PI = 3.1415926535;\nfinal String MEJOR_PAIS = \"Argentina\";\n</code></pre>"},{"location":"clase_02/#identificadores","title":"Identificadores","text":"<p>Para usar los identificadores, que no son m\u00e1s que el 'nombre' que le damos a nuestras variables y constantes, debemos tener algunas reglas en cuenta.</p> <p>Sintaxis de los identificadores</p> <ul> <li>No se pueden utilizar palabras reservadas</li> <li>El identificador debe ser \u00fanico.</li> <li>Deben comenzar siempre por una letra (1).</li> <li>Los siguientes caract\u00e9res pueden ser letras, d\u00edgitos, gui\u00f3n bajo (<code>_</code>) o el signo de pesos (<code>$</code>).</li> <li>Se distingue entre may\u00fasculas y min\u00fasculas (2).</li> <li>No hay una largo m\u00e1ximo ni m\u00ednimo establecido.</li> </ul> <ol> <li>La gente de Oracle (la empresa que desarroll\u00f3 Java) recomienda NO utilizar guiones bajos (<code>_</code>) ni signo de     pesos (<code>$</code>) como primer caracter de un identificador aunque estos est\u00e9n permitidos.</li> <li>  Java es sensible a may\u00fasculas y min\u00fasculas, con lo cual, el identificador <code>coso</code>     ser\u00e1 diferente a <code>Coso</code> o <code>COSO</code> (o cualquier otra variaci\u00f3n).</li> </ol> <p>Adem\u00e1s de estas reglas de sintaxis hay otro conjunto de cuestiones a tener en cuenta que se suelen denominar \"buenas pr\u00e1cticas\" de programaci\u00f3n.</p> <p>Estas son, como su nombre lo indica, una serie de buenos modales a la hora de escribir c\u00f3digo, que pueden variar de lenguaje en lenguaje. No van a hacer que nuestro c\u00f3digo falle en sentido estricto, pero seguirlas le facilita (\u00a1mucho!) la lectura de nuestro c\u00f3digo tanto a otras personas como a nosotrxs mismxs.</p> <p>Hay bastantes est\u00e1ndares de programaci\u00f3n que se pueden seguir y, por supuesto, siempre hay competencia entre cu\u00e1l est\u00e1ndar es mejor, pero con el tiempo una suele adoptar el que sea m\u00e1s utilizado en el lenguaje o tecnolog\u00eda que desarrolla o incluso en el \u00e1mbito social en el que programamos (grupo de amigxs, trabajo, etc\u2026).</p> <p>Dentro de las buenas pr\u00e1cticas m\u00e1s extendidas de Java, hay algunas que aplican a los identificadores y las detallamos a continuaci\u00f3n:</p> <p>Buenas pr\u00e1cticas</p> <ul> <li>Usar identificadores que reflejen el significado o el uso de los elementos. Ejemplos:<ul> <li><code>unasCosas</code> </li> <li><code>cantidadSillas</code> </li> </ul> </li> <li>Usar \"camelCase\" (es un anglicismo que se podr\u00eda traducir como \"tipoCamello\")   para identificar variables. Ejemplos:<ul> <li><code>cantidad_sillas</code> </li> <li><code>cantidadsillas</code> </li> <li><code>cantidadSillas</code> </li> </ul> </li> <li>Usar may\u00fasculas para identificar constantes. Ejemplos:<ul> <li><code>mejor_pais</code> </li> <li><code>MejorPais</code> </li> <li><code>MEJOR_PAIS</code> </li> </ul> </li> <li>Se recomienda no usar nombres muy largos ni muy cortos. Los nombres cortos solo se recomiendan para variables temporales de corta vida \u00fatil.</li> <li>No podremos usar tildes, di\u00e9resis ni <code>\u00f1</code> en nuestros identificadores <ul> <li><code>a\u00f1oActual</code> </li> <li><code>canci\u00f3nFinal</code> </li> <li><code>PING\u00dcINOS</code> </li> </ul> </li> </ul>"},{"location":"clase_02/#expresiones","title":"Expresiones","text":"<p>Junto con los operadores, las expresiones son los elementos b\u00e1sicos con los que armaremos nuestras sentencias.</p> <p>Repasemos qu\u00e9 era una sentencia: visualmente las vimos como l\u00edneas de c\u00f3digo (1) que representan una acci\u00f3n que debe ser ejecutada. Los bloques nos permiten agrupar l\u00edneas de c\u00f3digo que ser\u00e1n \"le\u00eddas\" como una \u00fanica sentencia.</p> <ol> <li>En Java -y otros lenguajes- terminan con un punto y coma <code>;</code></li> </ol> <p>En t\u00e9rminos muy muy generales diremos que una sentencia NO devuelve nada y que una expresi\u00f3n S\u00cd devuelve alguna cosa.</p> <p>Podemos definir una expresi\u00f3n como un fragmento de c\u00f3digo que utiliza operadores para manipular valores y producir un resultado.</p> <p>Lo que en matem\u00e1tica llamamos \"hacer una cuenta\" ser\u00eda en programaci\u00f3n \"crear una expresi\u00f3n\". La diferencia principal es que las expresiones en programaci\u00f3n adem\u00e1s de valores num\u00e9ricos (como en las cuentas) podemos tambi\u00e9n trabajar con palabras, caract\u00e9res y booleanos.</p> Expresiones <p>Una expresi\u00f3n es un conjunto de operadores, valores, variables, constantes y funciones que devuelve un resultado.</p> <p>Veamos un ejemplo b\u00e1sico para determinar qu\u00e9 es una expresi\u00f3n, qu\u00e9 es un operador y qu\u00e9 es una sentencia y poder as\u00ed diferenciarlos.</p> <pre><code>c = a + b;\n</code></pre> <ul> <li><code>a</code>, <code>b</code> y <code>c</code>: Son valores o datos.</li> <li><code>=</code> y <code>+</code>: Son operadores.</li> <li><code>a + b</code>: Es una expresi\u00f3n.</li> <li><code>c = a + b;</code>: Es una sentencia.</li> </ul>"},{"location":"clase_02/#palabras-reservadas","title":"Palabras reservadas","text":"<p>Palabras reservadas en Java</p> <code>abstract</code> <code>continue</code> <code>for</code> <code>new</code> <code>switch</code> <code>assert</code> <code>default</code> <code>goto</code> <code>package</code> <code>synchronize</code> <code>boolean</code> <code>do</code> <code>if</code> <code>private</code> <code>this</code> <code>break</code> <code>double</code> <code>implement</code> <code>protected</code> <code>throw</code> <code>byte</code> <code>else</code> <code>import</code> <code>public</code> <code>thows</code> <code>case</code> <code>enum</code> <code>instanceof</code> <code>return</code> <code>transient</code> <code>catch</code> <code>extends</code> <code>int</code> <code>short</code> <code>try</code> <code>char</code> <code>final</code> <code>interface</code> <code>static</code> <code>void</code> <code>class</code> <code>finally</code> <code>long</code> <code>strictfp</code> <code>volatile</code> <code>const</code> <code>float</code> <code>native</code> <code>super</code> <code>while</code> <ol> <li> <p>En situaciones excepcionales no nos va a tirar un error, sino que obtendremos valores totalmente inesperados. Ya veremos esto en detalle m\u00e1s adelante.\u00a0\u21a9</p> </li> </ol>"},{"location":"clase_02/ejercicios/","title":"Ejercicios","text":""},{"location":"clase_02/ejercicios/#ejercicios-para-la-clase-02","title":"Ejercicios para la clase 02","text":"<p>En esta clase vimos variables, constantes y expresiones.</p> <p>Primeros pasos para estos ejercicios:</p> <ul> <li>Abrir la IDE (Netbeans)</li> <li>Crear un nuevo programa (o abrir uno existente)<ul> <li>Si est\u00e1s creando uno nuevo, acordate de seleccionar la opci\u00f3n \"Java with Ant\". </li> </ul> </li> </ul> <p>NOTA: Para todos estos ejercicios, cuando proponemos mostrar 'cosas' por consola, agreguen adem\u00e1s un peque\u00f1o texto descriptivo antes del resultado o valor, as\u00ed se entiende qu\u00e9 es lo que estamos imprimiendo  </p> <p>Ejemplo:</p> <pre><code>  int desde = 2003;\n  int hasta = 2015;\n  int laDecadaGanada = hasta - desde;\n\n  System.out.println(\"La d\u00e9cada ganada dur\u00f3: \" + laDecadaGanada + \" a\u00f1os.\");\n</code></pre>"},{"location":"clase_02/ejercicios/#ejercicio-01-suma-de-enteros","title":"Ejercicio 01: Suma de enteros","text":"<p>Declar\u00e1 dos variables enteras <code>a</code> y <code>b</code>, asignales valores y mostr\u00e1 por consola la suma de ambas.</p>"},{"location":"clase_02/ejercicios/#ejercicio-02-area-de-un-rectangulo","title":"Ejercicio 02: \u00c1rea de un rect\u00e1ngulo","text":"<p>Escrib\u00ed un programa que calcule el \u00e1rea de un rect\u00e1ngulo, utilizando la f\u00f3rmula <code>base * altura</code>. Declar\u00e1 una variable para la base y otra para la altura, ambas de tipo <code>double</code>. Finalmente, mostr\u00e1 el resultado en la consola.</p>"},{"location":"clase_02/ejercicios/#ejercicio-03-promedio-de-tres-numeros","title":"Ejercicio 03: Promedio de tres n\u00fameros","text":"<p>Imaginemos que tenemos que sacar el promedio de una materia que tuvo 3 ex\u00e1menes en el cuatrimestre.</p> <p>Escrib\u00ed un programa en el que:</p> <ol> <li>Cada nota sea una variable de tipo entera (<code>int</code>) </li> <li>Se calcule el promedio de las 3 notas</li> <li>El promedio se guarde en otra variable que debemos mostrar por consola, con decimales (OJO: \u00bfqu\u00e9 tipo debemos usar para mostrar decimales?)</li> </ol>"},{"location":"clase_02/ejercicios/#ejercicio-04-intercambio-de-valores","title":"Ejercicio 04: Intercambio de valores","text":"<p>Escrib\u00ed un programa en el que inicialmente tengas dos variables (<code>x = 5</code> e <code>y = 10</code>) y luego intercambi\u00e1 sus valores y mostr\u00e1 el resultado por consola.</p>"},{"location":"clase_02/ejercicios/#ejercicio-05-conversion-de-temperatura","title":"Ejercicio 05: Conversi\u00f3n de temperatura","text":"<p>Imaginemos que tenemos un t\u00edo paquete que vive en Nueva York y cada vez que hablamos por tel\u00e9fono nos pregunta c\u00f3mo est\u00e1 el clima en Buenos Aires. Sabiendo que en Argentina utilizamos la escala de temperatura en grados Celsius (\u00b0c) y que en Estados Unidos utilizan la escala Fahrenheit (\u00b0f), escribamos un programita que nos ayude a convertir la temperatura de Celsius a Fahrenheit para ahorrarnos la engorrosa tarea de hacer esta operaci\u00f3n manual cada vez que hablamos con \u00e9l.</p> <ol> <li>Declar\u00e1 una variable para guardar la temperatura actual de Buenos Aires en grados Celsius.</li> <li>Us\u00e1 la f\u00f3rmula F=(C\u22179/5)+32F = (C * 9/5) + 32F=(C\u22179/5)+32 para convertir escalas.</li> <li>Guard\u00e1 la temperatura en F en una variable y</li> <li>Mostr\u00e1 la temperatura en F por consola</li> </ol>"},{"location":"clase_02/ejercicios/#ejercicio-06-calculo-de-sueldo","title":"Ejercicio 06: C\u00e1lculo de sueldo","text":"<p>Guard\u00e1 en variables el sueldo base y un bono extra. Calcul\u00e1 el sueldo total y mostralo. (Pens\u00e1 si los sueldos y el bono son valores enteros o reales)</p>"},{"location":"clase_02/ejercicios/#ejercicio-07-edad-en-meses-y-dias","title":"Ejercicio 07: Edad en meses y d\u00edas","text":"<p>Porque nunca est\u00e1 de m\u00e1s ser extravagante, escrib\u00ed un programa que muestre tu edad en meses y en d\u00edas (aproximados, usando 365 d\u00edas para un a\u00f1o, -a los bisiestos los ignoramos por un momentito).</p> <p>Mostr\u00e1 ambos resultados en la consola.</p>"},{"location":"clase_02/ejercicios/#ejercicio-08-concatenacion-de-cadenas","title":"Ejercicio 08: Concatenaci\u00f3n de cadenas","text":"<p>Utiliz\u00e1 una variable para guardar tu primer nombre y otra para guardar tu apellido. Mostr\u00e1 por consola un mensaje que diga <code>Hola, [nombre] [apellido]</code>.</p>"},{"location":"clase_02/ejercicios/#ejercicio-09-numero-par-o-impar","title":"Ejercicio 09: N\u00famero par o impar","text":"<p>Utiliz\u00e1 una variable de tipo entera para guardar un n\u00famero, mostr\u00e1 en consola si el n\u00famero es par o impar.</p>"},{"location":"clase_02/ejercicios/#ejercicio-10-hipotenusa-teorema-de-pitagoras","title":"Ejercicio 10: Hipotenusa (Teorema de Pit\u00e1goras)","text":"<ol> <li>Utiliz\u00e1 dos variables <code>catetoA</code> y <code>catetoB</code> (<code>double</code>) para guardar los valores de los catetos de un tri\u00e1ngulo,</li> <li>calcul\u00e1 la hipotenusa con la f\u00f3rmula: h=a2+b2h = \\sqrt{a^2 + b^2}h=a2+b2\u200b</li> <li>y mostr\u00e1 el resultado por consola</li> </ol>"},{"location":"clase_03/","title":"Clase 03: M\u00e1s variables","text":""},{"location":"clase_03/#conversion-de-tipos-de-datos-casteo","title":"Conversi\u00f3n de tipos de datos (casteo)","text":"<p>En programaci\u00f3n es indispensable la conversi\u00f3n de datos. Esto se debe a que en algunos casos por m\u00e1s que evaluemos  y estudiemos los datos que necesitamos para trabajar en un sistema, va a pasar que en alg\u00fan momento vamos a  necesitar convertir el tipo de datos con el que estamos trabajando.</p> <p>En lenguajes de tipado fuerte, como hemos hablado, el tipo de datos es fundamental. En el caso de java el compilador puede hacer la conversi\u00f3n autom\u00e1tica si necesitamos hacer la conversi\u00f3n de un tipo de dato de menor tama\u00f1o a uno de mayor tama\u00f1o. Si queremos hacer de manera inversa: de mayor a menor tama\u00f1o. El compilador nos marcar\u00e1 un error de compilaci\u00f3n</p> <p>Por lo tanto, pongamos la atenci\u00f3n en la conversi\u00f3n autom\u00e1tica. Por ejemplo si hacemos esto en nuestra IDE:  <pre><code>int valor1 = 3;\ndouble valor2 = valor1;\n\nSystem.out.print(\"Mostramos el valor convertido: \" + valor2);\n</code></pre> Nos va imprimir por consola: 3.0 Tom\u00f3 el valor entero 3 y lo convirti\u00f3 a un n\u00famero real 3,0. Lo cual est\u00e1 perfecto</p> <p>Ahora bien. Hay situaciones donde la conversi\u00f3n no se ajusta a las necesidades reales a la hora de hacer un sistema.</p> <p>Hagamos est\u00e1 operaci\u00f3n: <pre><code>int numero1 = 19; &lt;br&gt;\nint numero2 = 2;\n\ndouble resultado = numero1 / n\u00famero 2;\n\nSystem.out.print(\"El resultado de la divisi\u00f3n es: \" + resultado);\n</code></pre> Ejecutamos el programa y nos va a devolver por consola: 9.0  Ya vimos que el tipo de dato double maneja n\u00famero con coma, entonces \u00bfPor qu\u00e9 el resultado es incorrecto,  sabemos que es 9,5?  La respuesta a esa pregunta es porque el compilador no puede manejar autom\u00e1ticamente la transformaci\u00f3n de tipo int  a tipo double (o byte a int, int a float, etc) cuando viene de una operaci\u00f3n en base a dos n\u00fameros enteros.  Esto se debe a que los lenguajes crean sus datos gracias a est\u00e1ndares que se consens\u00faan internacionalmente.  \u00a1NO es algo que a alguien se le ocurre y listo!  Recordemos lo que vimos sobre tipos de datos primitivos. Cuando nosotros decimos que vamos a crear un dato del tipo int, el compilador, bas\u00e1ndose en esos est\u00e1ndares  construye el dato y lo guarda en memoria. A partir de ese momento el dato ya existe de una forma determinada.</p> <p>Pensemos en est\u00e1 analog\u00eda: Imaginemos que tenemos dos ficheros donde guardamos todos los nombres de las personas que conocemos en orden  alfab\u00e9tico.  En el primero tenemos los nombres de la A a la M y en el segundo tenemos los nombres de la N a Z.  Despu\u00e9s creamos otro fichero donde vamos a guardar, tambi\u00e9n organizado alfab\u00e9ticamente, todos los nombres de  la A a la Z.  Ahora bien, viene una compa\u00f1era o compa\u00f1ero y nos pide los primeros 100 nombres. Nosotros se los damos tom\u00e1ndolos, obviamente, del tercer fichero.  Pero cuando nuestra compa\u00f1era o compa\u00f1ero lo va a guardar en el fichero que le dieron descubre que su fichero  est\u00e1 organizado en grupos. Por ej: Familiares, Amigos, Trabajo, etc.  Queda claro que si no lo organiza antes de guardarlo va a tener todos los contactos desordenados y ser\u00eda inservible. </p> <p>Volvamos a nuestro ejemplo y hagamos esto:</p> <p><pre><code>int numero1 = 19;\nint numero2 = 2;\n\ndouble resultado = (double) numero1 / n\u00famero 2;\n\nSystem.out.print(\"El resultado de la divisi\u00f3n es: \" + resultado);\n</code></pre> Si ejecutamos el programa ahora vamos a tener el resultado que necesitamos.</p> <p>Este proceso de forzar al compilador para que convierta el tipo de dato, antes de guardarlo, se le llama  conversi\u00f3n de tipo de datos y coloquialmente lo llamamos \"castear\" o \"casteo\" </p> <p>En resumen, castear es la manera que tenemos en Java de decirle al compilador c\u00f3mo convertir un dato para  que encaje en otro tipo y as\u00ed tratar de evitar la perdida de datos.</p> <p>MUY IMPORTANTE: Lo que hay que entender es que siempre tenemos el mismo tama\u00f1o de datos. Recordemos lo que vimos en la clase de tipos de datos primitivos. Cuando cre\u00e1bamos un int, est\u00e1bamos creando un dato de 32 bits. Y cuando cre\u00e1bamos un float tambi\u00e9n est\u00e1bamos  creando un dato de 32 bits.  \u2192 Solo cambia la forma de organizar esos bits.</p> <p> </p>"},{"location":"clase_03/#clase-scanner","title":"Clase Scanner","text":"<p>La Clase Scanner forma parte del paquete java.util. O sea es un elemento dentro de ese paquete que contiene  muchas otras utilidades.  Algo muy pr\u00e1ctico a la hora de programar.  \u00bfPara que nos sirve esta utilidad?  Principalmente se usa para interactuar con el usuario para que este ingrese datos a nuestro programa.</p> <p>Por ejemplo: Tenemos que calcular el \u00e1rea de un cuadrado. Sabemos que la f\u00f3rmula es L x L (lado por lado),  pero no nos dan el valor sino que nos dicen que se lo pidamos al usuario. \u00bfComo hacemos eso?</p> <p>Tenemos que crear una variable usando la Clase Scanner.</p> <p>Hacemos en nuestra IDE dentro de nuestra funci\u00f3n Main: <pre><code>Scanner ingreso = new Scanner(System.in);&lt;br&gt;\nSystem.out.println(\u201cIngrese el valor del lado del cuadrado \u201d);&lt;br&gt; \nint lado = ingreso.nextInt();\n\nint area = lado * lado;\n\nSystem.out.println(\u201cEl area del cuadrado es: \u201d +  area);\n</code></pre> Si ejecutamos el programa vamos a ver en consola que el programa queda detenido en el mensaje:  Ingrese el valor del lado del cuadrado </p> <p>Eso es porque est\u00e1 esperando la intervenci\u00f3n del usuario.  Si hacemos clic con el mouse en la consola nos va aparecer un prompt (van a  ver est\u00e9 s\u00edmbolo | parpadeando)  Ah\u00ed ya pueden ingresar un n\u00famero y al presionar enter el programa va calcular el \u00e1rea, lo va a mostrar por la consola y va a terminar.</p> <p>Est\u00e1 Clase permite la entrada por teclado distintos tipos de datos.  (usamos en este caso la misma variable que creamos en primer ejemplo:  Scanner ingreso = new Scanner(System.in);)  Algunos ejemplos son:</p> <p>Para textos:  <pre><code>String nombre = ingreso.next()&lt;br&gt;\n</code></pre> Para un n\u00famero float: <pre><code>float numFloat = ingreso.nextFloat();&lt;br&gt;\n</code></pre> Para un n\u00famero double: <pre><code>double numDouble = ingreso.nextDouble();&lt;br&gt;\n</code></pre></p>"},{"location":"clase_03/ejercicios/","title":"Ejercicios","text":""},{"location":"clase_03/ejercicios/#ejercicios-para-la-clase-03","title":"Ejercicios para la clase 03","text":"<p>En esta clase vimos variables, constantes y expresiones.</p> <p>Primeros pasos para estos ejercicios:</p> <ol> <li>Abrir la IDE (Netbeans)</li> <li>Crear un nuevo programa (o abrir uno existente)<ol> <li>Si est\u00e1s creando uno nuevo, acordate de seleccionar la opci\u00f3n \"Java with Ant\".</li> </ol> </li> </ol>"},{"location":"clase_03/ejercicios/#javautilscanner","title":"<code>java.util.Scanner</code>","text":""},{"location":"clase_03/ejercicios/#ejercicio-11-area-de-un-circulo","title":"Ejercicio 11: \u00c1rea de un c\u00edrculo","text":"<p>Pedir que se ingrese el valor del radio <code>r</code>, calcul\u00e1 el \u00e1rea con la f\u00f3rmula: A=\u03c0\u00d7r2A = \\pi \\times r^2A=\u03c0\u00d7r2</p>"},{"location":"clase_03/ejercicios/#ejercicio-12-perimetro-de-un-cuadrado","title":"Ejercicio 12: Per\u00edmetro de un cuadrado","text":"<p>Ingresar el valor del valor del lado (<code>l</code>), calcul\u00e1 el per\u00edmetro con la f\u00f3rmula: 4\u00d7l4 \\times l4\u00d7l.</p>"},{"location":"clase_03/ejercicios/#ejercicio-13-velocidad-promedio","title":"Ejercicio 13: Velocidad promedio","text":"<p>Ten\u00e9s una distancia (<code>distanciaKm</code>) y un tiempo (<code>horas</code>). Calcul\u00e1 la velocidad promedio en km/h.</p>"},{"location":"clase_03/ejercicios/#ejercicio-14-minutos-a-horas-y-minutos","title":"Ejercicio 14: Minutos a horas y minutos","text":"<p>Ten\u00e9s un n\u00famero entero de minutos. Convertilo a horas y minutos. Ejemplo: 130 minutos \u2192 2 horas y 10 minutos.</p>"},{"location":"clase_03/ejercicios/#ejercicio-15-digito-de-las-unidades","title":"Ejercicio 15: D\u00edgito de las unidades","text":"<p>Ingresar por teclado el valor de un n\u00famero entero <code>num</code>, obten\u00e9 el d\u00edgito de las unidades con <code>num</code> <code>%</code> 10.</p>"},{"location":"clase_03/ejercicios/#ejercicio-16-division-entera-y-resto","title":"Ejercicio 16: Divisi\u00f3n entera y resto","text":"<p>Pedir el valor de dos variables enteras a y b, mostr\u00e1 el cociente entero y el resto.</p>"},{"location":"clase_03/ejercicios/#ejercicio-17-potencia","title":"Ejercicio 17: Potencia","text":"<p>Pedir el valor de dos variables enteras base y exponente, calcul\u00e1 la potencia</p>"},{"location":"clase_03/ejercicios/#ejercicio-18-kilogramos-a-libras","title":"Ejercicio 18: Kilogramos a libras","text":"<p>Convert\u00ed un peso en kilogramos (kg) a libras usando la f\u00f3rmula: libras=kg\u00d72.20462libras = kg \\times 2.20462libras=kg\u00d72.20462.</p>"},{"location":"clase_03/ejercicios/#ejercicio-19-promedio-de-notas-con-decimales","title":"Ejercicio 19: Promedio de notas con decimales","text":"<p>Pedir el ingreso de 4 notas. Calcul\u00e1 el promedio y mostr\u00e1lo con 2 decimales</p>"},{"location":"clase_03/ejercicios/#ejercicio-20-doble-y-triple-de-un-numero","title":"Ejercicio 20: Doble y triple de un n\u00famero","text":"<p>Pedir que se ingrese el valor de un n\u00famero entero, calcul\u00e1 y mostr\u00e1 el doble y el triple.</p>"},{"location":"clase_03/ejercicios/#ejercicio-21-area-y-perimetro-de-un-triangulo-equilatero","title":"Ejercicio 21: \u00c1rea y per\u00edmetro de un tri\u00e1ngulo equil\u00e1tero","text":"<p>Sabiendo el valor de una lado <code>a</code></p> <ol> <li>Calcul\u00e1 el per\u00edmetro con la f\u00f3rmula: P=a\u00d73P = a \\times 3P=a\u00d73</li> <li>Calcul\u00e1 el area. Con la f\u00f3rmula: A=a2\u00d734A = a^2 \\times \\frac{\\sqrt{3}}{4}A=a2\u00d743\u200b\u200b</li> </ol>"},{"location":"clase_03/ejercicios/#ejercicio-22-conversion-de-metros-a-cm-y-mm","title":"Ejercicio 22: Conversi\u00f3n de metros a cm y mm","text":"<p>Pedir que se ingrese el valor de una longitud en metros (double), convertila a cent\u00edmetros y mil\u00edmetros.</p>"},{"location":"clase_03/ejercicios/#ejercicio-23-promedio-de-velocidad-en-metros-por-segundo","title":"Ejercicio 23: Promedio de velocidad en metros por segundo","text":"<p>Convert\u00ed una velocidad en km/h (<code>vKmH</code>) a m/s (<code>vMs</code>) vMs=vKmH\u00d71000\u00f73600vMs = vKmH \\times 1000 \\div 3600vMs=vKmH\u00d71000\u00f73600.</p>"},{"location":"clase_03/ejercicios/#ejercicio-24-descuento-en-un-producto","title":"Ejercicio 24: Descuento en un producto","text":"<p>Pedir que se ingresen los valores de un precio y un porcentaje de descuento, calcul\u00e1 el precio final.</p>"},{"location":"clase_03/ejercicios/#ejercicio-25-tiempo-de-viaje","title":"Ejercicio 25: Tiempo de viaje","text":"<p>Pedir que se ingrese el valor de una distancia en km y una velocidad en km/h, calcul\u00e1 el tiempo de viaje en horas.</p>"},{"location":"clase_03/ejercicios/#ejercicio-26-concatenacion-de-edad","title":"Ejercicio 26: Concatenaci\u00f3n de edad","text":"<p>Dado nombre y edad, mostr\u00e1 el mensaje \"Me llamo  y tengo  a\u00f1os.\""},{"location":"clase_03/ejercicios/#ejercicio-27-interes-simple","title":"Ejercicio 27: Inter\u00e9s simple","text":"<p>Calcul\u00e1 el inter\u00e9s simple con la f\u00f3rmula: I = capital * tasa * tiempo.</p>"},{"location":"clase_03/ejercicios/#ejercicio-28-interes-compuesto","title":"Ejercicio 28: Inter\u00e9s compuesto","text":"<p>Calcul\u00e1 el monto final con la f\u00f3rmula: M = capital * (1 + tasa)^tiempo.</p>"},{"location":"clase_03/ejercicios/#ejercicio-29-conversion-de-dolares-a-pesos","title":"Ejercicio 29: Conversi\u00f3n de d\u00f3lares a pesos","text":"<p>Pedir que se ingrese un monto en d\u00f3lares y un tipo de cambio, calcul\u00e1 el equivalente en pesos.</p>"},{"location":"clase_03/ejercicios/#ejercicio-30-conversion-de-segundos-a-horasminutossegundos","title":"Ejercicio 30: Conversi\u00f3n de segundos a horas:minutos:segundos","text":"<p>Pedir que se ingrese el valor de un entero segundosTotales, convertilo a formato <code>hh:mm:ss</code>.</p>"},{"location":"clase_03/ejercicios/#ejercicio-31-promedio-ponderado","title":"Ejercicio 31: Promedio ponderado","text":"<p>Ten\u00e9s tres notas: n1, n2, n3 con pesos 0.2, 0.3 y 0.5 respectivamente. Calcul\u00e1 el promedio ponderado.</p>"},{"location":"clase_03/ejercicios/#ejercicio-32-promedio-de-edad-de-un-grupo","title":"Ejercicio 32: Promedio de edad de un grupo","text":"<p>Pedir el ingreso de la edad de 4 personas en variables y calcul\u00e1 el promedio.</p>"},{"location":"clase_03/ejercicios/#ejercicio-33-separar-decenas-y-unidades","title":"Ejercicio 33: Separar decenas y unidades","text":"<p>Pedir que se ingrese el valor de un n\u00famero de dos cifras, obten\u00e9 la decena y la unidad. Por ejemplo, si el n\u00famero entero es 23 la decena es el 2 y la unidad es el 3.</p>"},{"location":"clase_04/","title":"Clase 04: Arrays (vectores y matrices)","text":"<p>DEFINICI\u00d3N: Los arrays en java son una colecci\u00f3n ordenada, indexada y de tama\u00f1o fijo. Cuyos elementos pueden cambiar de valor pero  no de tipo. Esto que a primera vista es complejo y confuso lo vamos a ir desgranando paso a paso para entenderlo. </p>"},{"location":"clase_04/#vectores-arrays-unidimensionales","title":"Vectores (Arrays unidimensionales)","text":"<p>Empecemos por este tipo de array para adentrarnos en estos conceptos.</p> <p>Imaginemos que tenemos un estante donde ubicamos una serie de cajas, por ej: 10 cajas Es importante que las cajas sean iguales y pueden contener un solo tipo de elemento, por ejemplo: zapatillas Debajo de cada caja vamos a numerar el orden de las cajas. Ac\u00e1 hagamos una aclaraci\u00f3n. Naturalmente si nosotros les decimos que numeren el orden de las cajas, ustedes har\u00edan: 1, 2, 3, \u2026 10 Pero para nuestro ejemplo lo vamos hacer iniciando en 0. O sea, nos quedar\u00e1: 0, 1, 2, 3, \u2026 9 \u00bfPor qu\u00e9 es esto? Porque tenemos que recordar que el 0 para nosotros es un valor (existe) y siempre lo tomamos como el primer n\u00famero entero positivo.</p> <p>Si volvemos a nuestro ejemplo nos quedar\u00eda algo parecido a la imagen </p> <p></p> <p>Pasemos a trabajar con un Array unidimensional en java.  Crear un vector no es otra cosa que crear una variable y declarla de una manera que el compilador entienda que lo  que estamos creando es un array. A lo que ya sabemos en la declaraci\u00f3n de una variable del tipo entera:</p> <pre><code>int numero = 4;\n</code></pre> <p>La modificamos de est\u00e1 manera:</p> <pre><code>int[] numeros = new int[3];\n</code></pre> <p>Como podemos ver, a el formato que aprendimos al declarar variables le hicimos algunos cambios. Tenemos  TIPO    IDENTIFICADOR   OPERADOR    VALOR</p> <p>Analicemos lo que cambi\u00f3:  En el TIPO: Le agregamos el modificador [] (corchete de apertura y de cerrado) Ese modificador le dice al compilador que estamos creando un array. Y finalmente despu\u00e9s del operador relacional \"=\" vemos que para el valor usamos: new int[3]; Si aprovechamos la analog\u00eda de nuestro estante, estamos diciendo: Vamos a crear un estante nuevo con 3 cajas. Si ajustamos nuestro c\u00f3digo a la analog\u00eda de nuestro estante har\u00edamos esto:</p> <p><pre><code>int[] numeros = new int[10];\n</code></pre> Creamos un estante con 10 cajas para guardar enteros. Es importante entender que solo estamos creando el estante con las cajas y su n\u00famero identificador, pero todav\u00eda no hemos puesto n\u00fameros adentro de esas cajas. Tendr\u00edamos esto: Caja 0 -&gt; vac\u00eda  Caja 1 -&gt; vac\u00eda  Caja 2 -&gt; vac\u00eda  Caja 3 -&gt; vac\u00eda  \u2026 Caja 9 -&gt; vac\u00eda </p> <p>Ahora bien. Lo que necesitamos ahora es llenar esas cajas. Pasando a nuestro c\u00f3digo lo hacemos as\u00ed:</p> <pre><code>int[] numeros = new int[4];\n\nnumeros[0] = 25;\nnumeros[1] = 2;\nnumeros[2] = -8;\nnumeros[3] = 123;\n</code></pre> <p>Como podemos ver usamos el identificador del array con el n\u00famero de orden (\u00edndice) entre corchetes para que el  compilador sepa exactamente donde ubicar el valor. O sea en la primera caja, que tiene como \u00edndice 0, le ponemos el valor 25 adentro. En la segunda caja, con el \u00edndice 1, le ponemos el valor 2 adentro. En la tercera caja, con el \u00edndice 2, le penemos el valor -8 adentro. En la cuarta caja, con el \u00edndice 3, le penemos el valor 123 adentro.</p>"},{"location":"clase_04/#si-queremos-ver-por-consola-el-contenido-de-algun-elemento-del-arrays-hacemos","title":"Si queremos ver por consola el contenido de alg\u00fan elemento del arrays, hacemos","text":"<pre><code>System.out.println(numeros[0]); // muestra el contenido de la caja 0 \u2192 imprime 25\nSystem.out.println(numeros[1]); // muestra el contenido de la caja 1 \u2192 imprime 2\nSystem.out.println(numeros[2]); // muestra el contenido de la caja 2 \u2192 imprime -8\nSystem.out.println(numeros[3]); // muestra el contenido de la caja 3 \u2192 imprime 123\n</code></pre>"},{"location":"clase_04/#ahora-cambiemos-algun-valor-de-los-ya-asignados-a-nuestro-array","title":"Ahora cambiemos alg\u00fan valor de los ya asignados a nuestro array","text":"<p>Si hacemos esto</p> <pre><code>numeros[2] = 1000;\n</code></pre> <p>Cuando lo mostremos por consola, veremos esto: <pre><code>System.out.println(numeros[0]); // muestra el contenido de la caja 0 \u2192 imprime 25\nSystem.out.println(numeros[1]); // muestra el contenido de la caja 1 \u2192 imprime 2\nSystem.out.println(numeros[2]); // muestra el contenido de la caja 2 \u2192 imprime 1000\nSystem.out.println(numeros[3]); // muestra el contenido de la caja 3 \u2192 imprime 123\n</code></pre></p> <p>Por \u00faltimo veamos otra manera de declarar un array. Podemos crear el array y darle valores a cada \u00edndice en la misma declaraci\u00f3n. Lo \u00fanico que cambia es la forma de darle  valor despu\u00e9s del operador relacional</p> <pre><code>int[] numeros = {55,1, 0, 29, 44, 100};\n</code></pre> <p>En este caso estamos creando un estante con 6 cajas y al mismo tiempo las llenamos con esos valores. En la primera caja, que tiene como \u00edndice 0, le ponemos el valor 55 adentro. En la segunda caja, con el \u00edndice 1, le ponemos el valor 1 adentro. En la tercera caja, con el \u00edndice 2, le penemos el valor 0 adentro. En la cuarta caja, con el \u00edndice 3, le penemos el valor 29 adentro. En la quinta caja, con el \u00edndice 4, le penemos el valor 44 adentro. En la sexta caja, con el \u00edndice 5, le penemos el valor 100 adentro.</p> <p>Al hacerlo de est\u00e1 manera el compilador entiende que cada coma separa un valor de otro.</p> <p>En resumen un array es una colecci\u00f3n ordenada porque tiene un \u00edndice \u00fanico, una vez creado no puede cambiar la  cantidad de elementos que va a contener pero s\u00ed se puede cambiar el valor que guardaremos en cada ubicaci\u00f3n del array</p>"},{"location":"clase_04/ejercicios/","title":"Ejercicios para la clase 04","text":"<p>En esta clase vimos variables, constantes y expresiones.</p> <p>Primeros pasos para estos ejercicios:</p> <ol> <li>Abrir la IDE (Netbeans)</li> <li>Crear un nuevo programa (o abrir uno existente)<ol> <li>Si est\u00e1s creando uno nuevo, acordate de seleccionar la opci\u00f3n \"Java with Ant\".</li> </ol> </li> </ol>"},{"location":"clase_04/ejercicios/#ejercicio-01","title":"Ejercicio 01","text":"<p>Dise\u00f1ar una aplicaci\u00f3n que solicite al usuario que ingrese un n\u00famero, y mostrar si ese n\u00famero es par o impar.</p>"},{"location":"clase_05/","title":"Clase 05: Funciones","text":"<p>Reutilizaci\u00f3n, y estructuraci\u00f3n del c\u00f3digo.</p>"},{"location":"clase_05/#visibilidad","title":"Visibilidad","text":""},{"location":"clase_05/#scope-ambito","title":"Scope (\u00e1mbito?)","text":""},{"location":"clase_05/#parametros-y-argumentos","title":"Par\u00e1metros y Argumentos","text":""},{"location":"clase_05/#retornos-valores-de-devolucion","title":"Retornos / valores de devoluci\u00f3n","text":""},{"location":"clase_05/ejercicios/","title":"Ejercicios para la clase 05","text":"<p>En esta clase vimos variables, constantes y expresiones.</p> <p>Primeros pasos para estos ejercicios:</p> <ol> <li>Abrir la IDE (Netbeans)</li> <li>Crear un nuevo programa (o abrir uno existente)<ol> <li>Si est\u00e1s creando uno nuevo, acordate de seleccionar la opci\u00f3n \"Java with Ant\".</li> </ol> </li> </ol>"},{"location":"clase_05/ejercicios/#ejercicio-01","title":"Ejercicio 01","text":""},{"location":"clase_06/","title":"Clase 06: Funciones segunda parte","text":""},{"location":"clase_06/ejercicios/","title":"Ejercicios para la clase 06","text":"<p>En esta clase vimos variables, constantes y expresiones.</p> <p>Primeros pasos para estos ejercicios:</p> <ol> <li>Abrir la IDE (Netbeans)</li> <li>Crear un nuevo programa (o abrir uno existente)<ol> <li>Si est\u00e1s creando uno nuevo, acordate de seleccionar la opci\u00f3n \"Java with Ant\".</li> </ol> </li> </ol>"},{"location":"clase_06/ejercicios/#ejercicio-01","title":"Ejercicio 01","text":""},{"location":"clase_07/","title":"Clase 07: API de Java","text":"<p>El t\u00e9rmino API viene del ingl\u00e9s Application Programming Interface y lo podr\u00edamos traducir como Interfaz de Programaci\u00f3n de Aplicaciones.</p> <p>Ejemplo del mozo como la API entre servidor (cocina) y cliente. Pedido del cliente (request), platos (response).</p> <p></p>"},{"location":"clase_07/ejercicios/","title":"Ejercicios para la clase 07","text":"<p>En esta clase vimos variables, constantes y expresiones.</p> <p>Primeros pasos para estos ejercicios:</p> <ol> <li>Abrir la IDE (Netbeans)</li> <li>Crear un nuevo programa (o abrir uno existente)<ol> <li>Si est\u00e1s creando uno nuevo, acordate de seleccionar la opci\u00f3n \"Java with Ant\".</li> </ol> </li> </ol>"},{"location":"clase_07/ejercicios/#ejercicio-01","title":"Ejercicio 01","text":""},{"location":"clase_08/","title":"Clase 08: Clases","text":""},{"location":"clase_08/ejercicios/","title":"Ejercicios para la clase 08","text":"<p>En esta clase vimos variables, constantes y expresiones.</p> <p>Primeros pasos para estos ejercicios:</p> <ol> <li>Abrir la IDE (Netbeans)</li> <li>Crear un nuevo programa (o abrir uno existente)<ol> <li>Si est\u00e1s creando uno nuevo, acordate de seleccionar la opci\u00f3n \"Java with Ant\".</li> </ol> </li> </ol>"},{"location":"clase_08/ejercicios/#ejercicio-01","title":"Ejercicio 01","text":""},{"location":"clase_09/","title":"Clase 09: Arrays (o vectores)","text":""},{"location":"clase_09/ejercicios/","title":"Ejercicios para la clase 09","text":"<p>En esta clase vimos variables, constantes y expresiones.</p> <p>Primeros pasos para estos ejercicios:</p> <ol> <li>Abrir la IDE (Netbeans)</li> <li>Crear un nuevo programa (o abrir uno existente)<ol> <li>Si est\u00e1s creando uno nuevo, acordate de seleccionar la opci\u00f3n \"Java with Ant\".</li> </ol> </li> </ol>"},{"location":"clase_09/ejercicios/#ejercicio-01","title":"Ejercicio 01","text":""},{"location":"clase_10/","title":"Clase 10:","text":""},{"location":"clase_11/","title":"Clase 11:","text":""},{"location":"clase_12/","title":"Clase 12:","text":""},{"location":"clase_13/","title":"Clase 13:","text":""},{"location":"clase_14/","title":"Clase 14:","text":""},{"location":"clase_15/","title":"Clase 15:","text":""},{"location":"ejercicios/","title":"Ejercicios sueltos","text":""}]}