{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenidxs :)","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#probando-cajitas","title":"Probando cajitas","text":"<p>A ver una info</p> Note <p>Recuerdan que en la primera clase vimos que hab\u00eda lenguajes fuertemente tipados o d\u00e9bilmente tipados, esta caract\u00e9ristica de los lenguajes har\u00e1 que en nuestro programa debamos explicitar (o no) el tipo de dato que vamos a manipular.</p> <p>\u00a1Vamos entonces a los tipos de datos de Java!</p>"},{"location":"#tipos-primitivos","title":"Tipos primitivos","text":"<p>Suena como un conjunto de cazadores-recolectores que conviven con dinosaurios, pero, no son eso\u2026</p>"},{"location":"clase_1/","title":"Clase 01: \u00bfqu\u00e9 es un programa? + fases de desarrollo + estructura y sintaxis","text":""},{"location":"clase_1/#breve-repaso","title":"Breve repaso","text":"<p>En la clase pasada hab\u00edamos llegado a una definici\u00f3n para la acci\u00f3n de programar. Vimos que programar no era exclusivo de la inform\u00e1tica, sino una forma de pensar (l\u00f3gica) para elaborar una serie de instrucciones (algoritmo) que ser\u00e1n ejecutadas por una m\u00e1quina o sistema.</p> \u00bfQu\u00e9 es programar? <p>Programar es una forma de pensar para elaborar una serie de instrucciones que ser\u00e1n ejecutadas por un sistema.</p> \u00bfQu\u00e9 es un algoritmo? <ul> <li>Un algoritmo es una creaci\u00f3n humana.</li> <li>Se lo puede definir como una serie de instrucciones ordenadas o una lista ordenada de pasos para lograr un objetivo.</li> <li>Ejemplos cl\u00e1sicos: Una receta de cocina \ud83d\udcd6\ud83e\udd63, un manual para armar un mueble \ud83d\uddd2\ufe0f, tomarse el colectivo </li> </ul> <p>Vimos tambi\u00e9n qu\u00e9 era un lenguaje de programaci\u00f3n: una forma de escribir esas instrucciones. Y los categorizamos por algunas de sus posibles caracter\u00edsticas: por su forma de ejecuci\u00f3n, por su nivel de rigurosidad en su sint\u00e1xis y sem\u00e1ntica, por sus paradigmas y por su nivel de abstracci\u00f3n.</p> <p>Vimos tambi\u00e9n que los lenguajes de programaci\u00f3n de \u201calto nivel\u201d intentan arrimarse al lenguaje humano y, al igual que ese, tienen una serie de reglas de sintaxis y sem\u00e1ntica con las que hay que cumplir para que, al fin de cuentas, la m\u00e1quina pueda ejecutar nuestras instrucciones de la manera en que las pensamos.</p> Los lenguajes de programaci\u00f3n <ul> <li>Un lenguaje de programaci\u00f3n es una forma de escribir instrucciones.</li> <li>Se los suele agrupar por sus caracter\u00edsticas distintivas.</li> <li>Al igual que el lenguaje humano, cada lenguaje tiene reglas sint\u00e1cticas y sem\u00e1nticas.</li> </ul> <p>A partir de estas definiciones, ya podemos adentrarnos en dilucidar\u2026 \u00bfqu\u00e9 es entonces un programa?</p>"},{"location":"clase_1/#programa","title":"Programa","text":"<p>La palabra programa puede hacer referencia a muchas cosas no tan dis\u00edmiles como aparentan: Un programa de una materia de la facu, un programa de televisi\u00f3n, un programa pol\u00edtico (quienes tengan cercan\u00eda a espacios de discusi\u00f3n pol\u00edtica, habr\u00e1n notado los constantes reclamos de la existencia de dicha cosa), etc\u2026</p> <p>Como podr\u00e1n observar, todas esas acepciones de la palabra \u201cprograma\u201d son bastante similares: Es un conjunto ordenado de t\u00f3picos que se deben seguir en el orden establecido y de una forma m\u00e1s o menos constante.</p> <p>Pues bien, entonces un programa inform\u00e1tico no es m\u00e1s que una seguidilla de sentencias que se ejecutan desde el inicio hasta el final (ya veremos un poco m\u00e1s esto), realizando as\u00ed las acciones que definimos dentro de ese programa.</p> \u00bfQu\u00e9 es un programa? <p>Un programa inform\u00e1tico es un conjunto de sentencias que se ejecutan desde el inicio hasta el final realizando as\u00ed las acciones definidas.</p>"},{"location":"clase_1/#fases-de-desarrollo","title":"Fases de desarrollo","text":"<p>Esto lo veremos en detalle m\u00e1s adelante cuando veamos ejercicios de problemas, pero vale la pena mencionarlo aqu\u00ed para tener una idea general de las fases que tiene el desarrollo de un programa.</p> <p>\u00bfPor qu\u00e9 insistimos tanto en esto de que programar no es exclusivamente escribir c\u00f3digo en un lenguaje elegido? La programaci\u00f3n empieza mucho antes de sentarse a escribir: se arranca siempre pensando un problema, antes incluso de pensar en c\u00f3mo resolverlo. Recuerden que dijimos en la primera clase que programar es pensar en soluciones creativas para problemas complejos.</p> <p>Es decir, primero vamos a intentar descomponer el problema en pasos l\u00f3gicos y ordenados, luego vamos a imaginar y dise\u00f1ar soluciones posibles y, finalmente como \u00faltimo paso, vamos a traducir esas soluciones a c\u00f3digo en el lenguaje que hayamos elegido.</p> Fases de desarrollo <ol> <li>Descomponer el problema en pasos l\u00f3gicos y ordenados</li> <li>Imaginar y dise\u00f1ar las soluciones posibles</li> <li>Traducir las soluciones elegidas a c\u00f3digo</li> </ol>"},{"location":"clase_1/#estructura-de-un-programa","title":"Estructura de un programa","text":"<p>Vamos a ver c\u00f3mo se ve un programita b\u00e1sico (\u201cHola Mundo\u201c<sup>1</sup>) para intentar descomponer su estructura.</p> <pre><code>package HolaMundo;\n\n/**\n *\n * @author nombre\n */\npublic class HolaMundo {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO: el c\u00f3digo a ejecutar viene ac\u00e1 abajo\n        System.out.print(\"\u00a1Hola mundo!\");\n    }\n}\n</code></pre> <p>Descomponemos el programa:</p> <ul> <li>Vemos que hay l\u00edneas de texto</li> <li>Las l\u00edneas parecieran estar agrupadas en \u201cbloques\u201d</li> <li>Hay unas l\u00edneas \u201cespeciales\u201d que empiezan con s\u00edmbolos: barras y asteriscos (<code>/**</code> <code>//</code>) </li> <li>Para imprimir un texto, el lenguaje \u201cya viene\u201d con una funci\u00f3n definida para tal fin (<code>System.out.print()</code>)</li> </ul> <p>Ctrl+Z</p>"},{"location":"clase_1/#sentencias-y-bloques","title":"Sentencias y bloques","text":"<p>Las l\u00edneas de nuestro programa son\u2026 \u00a1las sentencias! Estas vienen a ser la representaci\u00f3n de las acciones que nuestro programa debe ejecutar.</p> <p>A la agrupaci\u00f3n de l\u00edneas de c\u00f3digo que conforman una sola sentencia, las llamaremos bloques. Indentaci\u00f3n</p>"},{"location":"clase_1/#comentarios","title":"Comentarios","text":"<p>Un comentario es una l\u00ednea de texto que no es ejecutada, es algo as\u00ed como una nota que agrega quien escribe el programa para hacer aclaraciones acerca de ese c\u00f3digo. Pueden ser notas sobre la funcionalidad (qu\u00e9 hace), y tambi\u00e9n para facilitar la comprensi\u00f3n de la soluci\u00f3n implementada (c\u00f3mo lo hace). Es una buena pr\u00e1ctica utilizar los comentarios para \u201cdocumentar\u201d nuestro c\u00f3digo y as\u00ed facilitar que otras personas puedan modificarlo (o incluso para nuestro yo del futuro :) ).</p>"},{"location":"clase_1/#ciclo-del-programa-inicio-proceso-final","title":"Ciclo del programa: Inicio, proceso, final.","text":"<p>Analicemos el ciclo:</p> <ul> <li>Inicio: Punto de entrada</li> <li>Proceso: El c\u00f3digo es ejecutado (una vez que se carg\u00f3 en memoria) y el sistema operativo gestiona los recursos del   entorno (asigna recursos, comunica con dispositivos I/O, archivos, etc).</li> <li>Final: C\u00f3digos de salida</li> </ul>"},{"location":"clase_1/#tipos-de-datos-y-valores","title":"Tipos de datos y valores","text":"<p>Los tipos de datos clasifican datos seg\u00fan sus caracter\u00edsticas espec\u00edficas. Por otro lado, los valores son los datos dentro de cada tipo.</p> <p>Recuerdan que en la primera clase vimos que hab\u00eda lenguajes fuertemente tipados o d\u00e9bilmente tipados, esta caract\u00e9ristica de los lenguajes har\u00e1 que en nuestro programa debamos explicitar (o no) el tipo de dato que vamos a manipular.</p>"},{"location":"clase_1/#tipos-primitivos","title":"Tipos primitivos","text":"<p>[Abe:: Copi\u00e9 esto del doc de la clase, pero modificalo, agreg\u00e1, borr\u00e1]</p> <p>Los \u201ctipos primitivos\u201d no son unos \u00f1atos que conviven con dinosaurios y viven en cuevas, sino\u2026 los tipos de datos que ya vienen definidos por el lenguaje. Estos ocupar\u00e1n un espacio definido en memoria que debemos saber para utilizar cada \u201ctipo\u201d adecuadamente. Recordemos que las maquinas solo interpretan datos binarios, esto quiere decir que solo entiende el 1 y el 0 Por lo tanto para las maquinas todo es una convinaci\u00f3n de esos dos valores a los que definimos como bit: Un bit tiene el valor 1 o 0. Tengamos en claro eso como base para entender como se definien los tipos de datos primitivos. Aprovechemos el primer tipo de datos para profundizar en esto: 1. byte Es un tipo de dato que representa una estructura de 8 bits. O sea es el conjunto de 8 bits:  byte = 00000000  Este tipo de datos puede almacenar los valores n\u00famericos enteros que van desde -128 al 127 (ambos inclusive)  Ustedes se preguntar\u00e1n \u00bfComo es que eso sucede? Bueno la maquina construye los n\u00fameros alternando 1 y 0 en esa sucesion de bits. Por ejemplo lo que escribimos m\u00e1s arriba: byte = 00000000 representa un 0 para la maquina, o sea nosotros ecribimos un 0 en el teclado y la maquina lo traduce a ese conjunto de bits. Si nosotros escribimos un 5 la maquina lo traduce como 00000101. Como pueden ver siguen siendo 8 bits lo que cambia es que posiciones tienen un 1 o un 0. Todo esto es importante porque les da la dimensi\u00f3n de lo que se ocupa en la memoria al crear datos. Cuando nosotros creamos un dato la computadora reserva en memoria el tama\u00f1o mayor que puede alcanzar ese dato. En el ejemplo que estamos usando, un byte, la maquina va a reservar 8 bits (8 lugares para poner 1 y 0). Entonces es importante que antes de crear datos pensemos qu\u00e9 valores vamos a manejar 2. short  Representa un tipo de dato de 16 bits. El doble en el uso de la memoria, o sea: 00000000 00000000  Puede almacenar valores n\u00famericos enteros de -32.768 a 32.767. Por supuesto tambi\u00e9n lo hace convinando 1 y 0 en esas 16 posiciones 3. int  Este tipo de datos puede amacenar valores n\u00famericos enteros de 32 bits, o sea 4 veces nuestro primer dato 00000000 Los valoes van desde -2\u00b3\u00b9 al 2\u00b3\u00b9-1. Como pueden ver ya el tama\u00f1o del n\u00famero que permite manejar en mucho m\u00e1s grande. Podemos trabajar con n\u00fameros un poco superiores a los 2 mill millones -2.147.483.648 y 2.147.483.647. 4. long  Es un tipo de datos de 64 bits o sea 8 veces nuestro primer tipo de dato:  00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 Y puede almacenar n\u00fameros enteros que van desde -2\u2076\u00b3 al 2\u2076\u00b3-1. Como se puede imaginar es extremadamente grande: 9.223372 \u00d7 10\u00b9\u2078  5. float  Es un tipo de dato de 32 bits, como el int, solo que permite manejar n\u00fameros com coma flotante. Por ejemplo 16,4 o 1879223,45 6. double  En este caso es un tipo de dato de 64 bits, como el long, y tambi\u00e9n premite manejar n\u00fameros con coma flotante. La direfencia entre el float y double es, obviamente que maneja un n\u00famero mucho m\u00f1as grande, pero principalmente es  la precisi\u00f3n del n\u00famero. Al ser un n\u00famero decimal su exactitud depende de la cantidad de d\u00edgitos maneja despu\u00e9s de la coma. El tipo de dato double tiene el doble de precisi\u00f3n en ese sentido. 7. boolean  Este es un tipo de dato de un bit que representa verdadero o falso. 8. char  Es un tipo de dato que representa un car\u00e1cter Unicode (\u201chttps://www.rapidtables.org/code/text/unicode-characters.html\u201d) de 16 bits. Se utiliza mucho el tipo de dato char para manejar un a letra y no un pedazo de texto. 9. String  Este tipo de datos lo ponemos como primitivo, pero no lo es. En principio hay que observar que empieza con una may\u00fascula. En casi todos los lenguajes de programaci\u00f3n orientada a objetos esto tiene un significado importante. Por ahora podemos decir que cuando tenemos que trabajar con textos, usamos este tipo de datos.</p>"},{"location":"clase_1/#operadores","title":"Operadores","text":"<p>[Yo sigo ac\u00e1 ma\u00f1ana]</p> <ol> <li> <p>\u201cHola, mundo\u201d en inform\u00e1tica es un programa que muestra el texto \u00abHola, mundo\u00bb en un dispositivo de visualizaci\u00f3n, en la mayor\u00eda de los casos la pantalla de un monitor. Este programa suele ser usado como introducci\u00f3n al estudio de un lenguaje de programaci\u00f3n, siendo un primer ejercicio t\u00edpico considerado fundamental desde el punto de vista did\u00e1ctico.\u00a0\u21a9</p> </li> </ol>"}]}