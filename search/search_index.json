{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenidxs :)","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#probando-cajitas","title":"Probando cajitas","text":"<p>A ver una info</p> Note <p>Recuerdan que en la primera clase vimos que hab\u00eda lenguajes fuertemente tipados o d\u00e9bilmente tipados, esta caract\u00e9ristica de los lenguajes har\u00e1 que en nuestro programa debamos explicitar (o no) el tipo de dato que vamos a manipular.</p> <p>\u00a1Vamos entonces a los tipos de datos de Java!</p>"},{"location":"#tipos-primitivos","title":"Tipos primitivos","text":"<p>Suena como un conjunto de cazadores-recolectores que conviven con dinosaurios, pero, no son eso\u2026</p>"},{"location":"clase_1/","title":"Clase 01: \u00bfqu\u00e9 es un programa? + fases de desarrollo + estructura y sintaxis","text":""},{"location":"clase_1/#breve-repaso","title":"Breve repaso","text":"<p>En la clase pasada hab\u00edamos llegado a una definici\u00f3n para la acci\u00f3n de programar. Vimos que programar no era exclusivo de la inform\u00e1tica, sino una forma de pensar (l\u00f3gica) para elaborar una serie de instrucciones (algoritmo) que ser\u00e1n ejecutadas por una m\u00e1quina o sistema.</p> \u00bfQu\u00e9 es programar? <p>Programar es una forma de pensar para elaborar una serie de instrucciones que ser\u00e1n ejecutadas por un sistema.</p> \u00bfQu\u00e9 es un algoritmo? <ul> <li>Un algoritmo es una creaci\u00f3n humana.</li> <li>Se lo puede definir como una serie de instrucciones ordenadas o una lista ordenada de pasos para lograr un objetivo.</li> <li>Ejemplos cl\u00e1sicos: Una receta de cocina \ud83d\udcd6\ud83e\udd63, un manual para armar un mueble \ud83d\uddd2\ufe0f, tomarse el colectivo </li> </ul> <p>Vimos tambi\u00e9n qu\u00e9 era un lenguaje de programaci\u00f3n: una forma de escribir esas instrucciones. Y los categorizamos por algunas de sus posibles caracter\u00edsticas: por su forma de ejecuci\u00f3n, por su nivel de rigurosidad en su sint\u00e1xis y sem\u00e1ntica, por sus paradigmas y por su nivel de abstracci\u00f3n.</p> <p>Vimos tambi\u00e9n que los lenguajes de programaci\u00f3n de \u201calto nivel\u201d intentan arrimarse al lenguaje humano y, al igual que ese, tienen una serie de reglas de sintaxis y sem\u00e1ntica con las que hay que cumplir para que, al fin de cuentas, la m\u00e1quina pueda ejecutar nuestras instrucciones de la manera en que las pensamos.</p> Los lenguajes de programaci\u00f3n <ul> <li>Un lenguaje de programaci\u00f3n es una forma de escribir instrucciones.</li> <li>Se los suele agrupar por sus caracter\u00edsticas distintivas.</li> <li>Al igual que el lenguaje humano, cada lenguaje tiene reglas sint\u00e1cticas y sem\u00e1nticas.</li> </ul> <p>A partir de estas definiciones, ya podemos adentrarnos en dilucidar\u2026 \u00bfqu\u00e9 es entonces un programa?</p>"},{"location":"clase_1/#programa","title":"Programa","text":"<p>La palabra programa puede hacer referencia a muchas cosas no tan dis\u00edmiles como aparentan: Un programa de una materia de la facu, un programa de televisi\u00f3n, un programa pol\u00edtico (quienes tengan cercan\u00eda a espacios de discusi\u00f3n pol\u00edtica, habr\u00e1n notado los constantes reclamos de la existencia de dicha cosa), etc\u2026</p> <p>Como podr\u00e1n observar, todas esas acepciones de la palabra \u201cprograma\u201d son bastante similares: Es un conjunto ordenado de t\u00f3picos que se deben seguir en el orden establecido y de una forma m\u00e1s o menos constante.</p> <p>Pues bien, entonces un programa inform\u00e1tico no es m\u00e1s que una seguidilla de sentencias que se ejecutan desde el inicio hasta el final (ya veremos un poco m\u00e1s esto), realizando as\u00ed las acciones que definimos dentro de ese programa.</p> \u00bfQu\u00e9 es un programa? <p>Un programa inform\u00e1tico es un conjunto de sentencias que se ejecutan desde el inicio hasta el final realizando as\u00ed las acciones definidas.</p>"},{"location":"clase_1/#fases-de-desarrollo","title":"Fases de desarrollo","text":"<p>Esto lo veremos en detalle m\u00e1s adelante cuando veamos ejercicios de problemas, pero vale la pena mencionarlo aqu\u00ed para tener una idea general de las fases que tiene el desarrollo de un programa.</p> <p>\u00bfPor qu\u00e9 insistimos tanto en esto de que programar no es exclusivamente escribir c\u00f3digo en un lenguaje elegido? La programaci\u00f3n empieza mucho antes de sentarse a escribir: se arranca siempre pensando un problema, antes incluso de pensar en c\u00f3mo resolverlo. Recuerden que dijimos en la primera clase que programar es pensar en soluciones creativas para problemas complejos.</p> <p>Es decir, primero vamos a intentar descomponer el problema en pasos l\u00f3gicos y ordenados, luego vamos a imaginar y dise\u00f1ar soluciones posibles y, finalmente como \u00faltimo paso, vamos a traducir esas soluciones a c\u00f3digo en el lenguaje que hayamos elegido.</p> Fases de desarrollo <ol> <li>Descomponer el problema en pasos l\u00f3gicos y ordenados</li> <li>Imaginar y dise\u00f1ar las soluciones posibles</li> <li>Traducir las soluciones elegidas a c\u00f3digo</li> </ol>"},{"location":"clase_1/#estructura-de-un-programa","title":"Estructura de un programa","text":"<p>Vamos a ver c\u00f3mo se ve un programita b\u00e1sico (\u201cHola Mundo\u201c<sup>1</sup>) para intentar descomponer su estructura.</p> <pre><code>/**\n *\n * @author nombre\n */\npublic class HolaMundo {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO: el c\u00f3digo a ejecutar viene ac\u00e1 abajo.\n        System.out.print(\"\u00a1Hola mundo!\");\n    }\n}\n</code></pre> <p>Descomponemos el programa:</p> <ul> <li>Vemos que hay l\u00edneas de texto</li> <li>Las l\u00edneas parecieran estar agrupadas en \u201cbloques\u201d</li> <li>Hay llaves que \u201cengloban\u201d l\u00edneas</li> <li>Hay par\u00e9ntesis que \u201cabrazan\u201d palabras</li> <li>Hay unas l\u00edneas \u201cespeciales\u201d que empiezan con s\u00edmbolos: barras y asteriscos (<code>/**</code> <code>//</code>)</li> <li>La l\u00ednea que imprime el texto (<code>System.out.print()</code>), \u201cya viene\u201d con el lenguaje. </li> </ul>"},{"location":"clase_1/#sentencias-y-bloques","title":"Sentencias y bloques","text":"<p>Las l\u00edneas de nuestro programa son\u2026 \u00a1las sentencias! Una sentencia es una representaci\u00f3n de la acci\u00f3n que nuestro programa debe ejecutar.</p> <p>A la agrupaci\u00f3n de l\u00edneas de c\u00f3digo que conforman una sola sentencia, las llamaremos bloques.</p>"},{"location":"clase_1/#llaves-y-parentesis","title":"Llaves y par\u00e9ntesis","text":"<p>Las llaves son las que construyen la estructura del c\u00f3digo, delimitando los bloques. Indican que todo lo que est\u00e1 entre la llave de apertura (<code>{</code>) y la de clausura (<code>}</code>) \u201cpertence\u201d a la l\u00ednea que antecede inmediatamente a la apertura.</p> <p>En nuestro ejemplo tenemos dos \u201cconjuntos\u201d de llaves:</p> <p><pre><code>public class HolaMundo {\n    // Hay cosas ac\u00e1 adentro.\n    // Y todas pertenecen a esta clase (class) p\u00fablica (public) llamada HolaMundo.\n}\n</code></pre> y</p> <pre><code>public static void main(String[] args) {\n    // Hay cosas ac\u00e1 adentro.\n    // Y todas pertenecen esta funci\u00f3n p\u00fablica y est\u00e1tica (static) llamada main.\n}\n</code></pre> <p>Los par\u00e9ntesis tambi\u00e9n cumplen la funci\u00f3n de agrupar, pero a diferencia de las llaves no conforman bloques, sino algo similar a un agrupamiento de palabras o incluso una palabra sola.</p> <p>Veremos esto m\u00e1s en detalle cuando veamos \u201cFunciones\u201d (que se suele representar: <code>f(x)</code>) pero por ahora recordemos que lo que est\u00e1 dentro de un par\u00e9ntesis \u201cpertenece\u201d a la palabra o expresi\u00f3n que antecede inmediatamente el de apertura <code>(</code>.</p> <pre><code>/**\n *\n * @author nombre\n */\npublic class HolaMundo {\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        // TODO: el c\u00f3digo a ejecutar viene ac\u00e1 abajo.\n        System.out.print(\"\u00a1Hola mundo!\");\n    }\n}\n</code></pre>"},{"location":"clase_1/#indentacion","title":"Indentaci\u00f3n","text":"<p>El espacio en blanco que vemos antes de las l\u00edneas de c\u00f3digo es la indentaci\u00f3n o el indentado. En la sintaxis de los lenguajes humanos esto se conoce como sangr\u00eda. En el caso de Java la indentaci\u00f3n no tiene importancia sint\u00e1ctica ni sem\u00e1ntica, peeeero es importante respetarla porque facilita visualmente la comprensi\u00f3n y la identificaci\u00f3n de los bloques.</p>"},{"location":"clase_1/#comentarios","title":"Comentarios","text":"<p>Un comentario es una l\u00ednea de texto que no es ejecutada, es una nota que agrega quien escribe el programa para hacer aclaraciones sobre ese c\u00f3digo. Pueden ser notas sobre la funcionalidad (qu\u00e9 hace), o para facilitar la comprensi\u00f3n de la soluci\u00f3n implementada (c\u00f3mo lo hace).</p> <p>Es una buena pr\u00e1ctica utilizar los comentarios para \u201cdocumentar\u201d nuestro c\u00f3digo y as\u00ed facilitar que otras personas puedan modificarlo (o incluso para nuestro yo del futuro :) ).</p>"},{"location":"clase_1/#ciclo-del-programa-inicio-proceso-final","title":"Ciclo del programa: Inicio, proceso, final.","text":"<p>Veremos esto en clase cuando \u201ccorramos\u201d  nuestro programa, pero dejamos aqu\u00ed una definici\u00f3n muy esquem\u00e1tica de un ciclo. </p> <p>Analicemos el ciclo:</p> <ul> <li>Inicio: Punto de entrada (o entrypoint en ingl\u00e9s)</li> <li>Proceso: Una vez que se carg\u00f3 en memoria, el c\u00f3digo es ejecutado y el sistema operativo gestionar\u00e1 los recursos del   entorno (asignando recursos, comunicando con dispositivos de entrada y salida, archivos, etc\u2026).</li> <li>Final: C\u00f3digo de salida.</li> </ul>"},{"location":"clase_1/#tipos-de-datos-y-valores","title":"Tipos de datos y valores","text":"<p>Los tipos de datos clasifican datos seg\u00fan sus caracter\u00edsticas espec\u00edficas. Los valores son los datos en s\u00ed mismos (y pertenecer\u00e1n a un tipo u otro). Entenderemos un poco m\u00e1s el concepto de valor y dato cuando veamos Variables.</p> <p>Recuerdan que en la primera clase vimos que hab\u00eda lenguajes fuertemente tipados o d\u00e9bilmente tipados, esta caract\u00e9ristica de los lenguajes har\u00e1 que en nuestro programa debamos explicitar (o no) el tipo de dato que vamos a manipular. Veamos entonces ahora los tipos de datos llamados primitivos o elementales que nos ofrece Java.</p>"},{"location":"clase_1/#tipos-primitivos","title":"Tipos primitivos","text":"<p>Los \u201ctipos primitivos\u201d<sup>2</sup>, a veces llamados tambi\u00e9n Tipos Elementales, son los tipos de datos originales de cada lenguaje. Es decir que cada lenguaje ya nos proporciona esos tipos y as\u00ed tambi\u00e9n los define:</p> <ol> <li>Qu\u00e9 tipo de dato se puede representar (n\u00fameros -enteros o decimales-, caract\u00e9res -letras y s\u00edmbolos-, etc\u2026)</li> <li>Sus rangos de valores posibles</li> <li>Y por lo anterior entonces tambi\u00e9n se define el espacio que ocupar\u00e1n en memoria los datos pertenecientes a cada tipo</li> </ol> <p>Recordemos que las m\u00e1quinas solamente \u201centienden\u201d datos que llamamos binarios, esto quiere decir que s\u00f3lo pueden ejecutar unos y ceros. Por lo tanto, para las m\u00e1quinas todo ser\u00e1 una combinaci\u00f3n de esos dos valores a los que definimos como bits: Un bit puede tener un valor de 1 o de 0.</p> <p>Esto lo tenemos que tener claro para entender como se definen los tipos de datos primitivos.</p> <p>Aprovechemos el primer tipo de datos para profundizar en esto:</p>"},{"location":"clase_1/#byte-byte-anglicismo-u-octeto","title":"byte (byte -anglicismo- u octeto)","text":"<p>Es un tipo de dato que representa una estructura de 8 bits. O sea, es el conjunto de 8 bits:</p> <pre><code>byte = 00000000\n</code></pre> <p>Este tipo de dato puede almacenar valores num\u00e9ricos enteros que van desde -128 hasta 127 (ambos inclusive).</p> <p>Ustedes se preguntar\u00e1n \u00bfc\u00f3mo es que eso sucede? bueno, la maquina construye los n\u00fameros alternando <code>1</code> y <code>0</code> en esa sucesi\u00f3n de bits.</p> <p>Por ejemplo, lo que escribimos m\u00e1s arriba: <code>byte = 00000000</code> para la m\u00e1quina representa <code>0</code>. O sea, nosotros escribimos un <code>0</code> en el teclado y la m\u00e1quina lo \u201ctraducir\u00e1\u201d a ese conjunto de (8) bits. Si nosotros escribimos un 5, la m\u00e1quina lo traducir\u00e1 como <code>00000101</code>. Como pueden ver siguen siendo 8 bits, lo que cambian son las posiciones que tienen un <code>1</code> o un <code>0</code>.</p> <p>Todo esto es importante porque les da la dimensi\u00f3n de lo que ocupan en memoria los datos.</p> <p>Cuando nosotros creamos un dato, la computadora reserva en memoria el tama\u00f1o mayor que puede llegar a alcanzar ese dato. En el ejemplo que estamos usando, un byte, la m\u00e1quina va a reservar 8 bits (8 lugares para poner unos y ceros).</p> <p>Entonces es importante que antes de crear datos pensemos qu\u00e9 valores vamos a querer manejar.</p>"},{"location":"clase_1/#short-entero-corto","title":"short (entero corto)","text":"<p>Representa un tipo de dato de 16 bits. O sea, que usar\u00e1 el doble de memoria que nuestro tipo anterior: <code>00000000 00000000</code>.</p> <p>Puede almacenar valores num\u00e9ricos enteros desde -32.768 hasta 32.767. Por supuesto tambi\u00e9n lo hace combinando <code>1</code>s y <code>0</code>s en esas 16 posiciones.</p>"},{"location":"clase_1/#int-entero","title":"int (entero)","text":"<p>Este tipo de dato puede almacenar valores num\u00e9ricos enteros de 32 bits, o sea 4 veces nuestro primer dato <code>00000000</code> Los valores van desde -2<sup>31</sup> hasta 2<sup>31</sup>-1. Como pueden ver, el tama\u00f1o del n\u00famero que permite manejar en mucho m\u00e1s grande.</p> <p>Podemos trabajar con n\u00fameros un poco superiores a los 2 mill millones -2.147.483.648 y 2.147.483.647.</p>"},{"location":"clase_1/#long-entero-largo","title":"long (entero largo)","text":"<p>Es un tipo de datos de 64 bits o sea 8 veces nuestro primer tipo de dato:  <code>00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000</code> Y puede almacenar n\u00fameros enteros que van desde -2<sup>63</sup> hasta 2<sup>63</sup>-1. Como se puede imaginar es extremadamente grande: 9.223372 \u00d7 10<sup>18</sup></p>"},{"location":"clase_1/#float-coma-flotante-o-real","title":"float (coma flotante o \u2018real\u2019)","text":"<p>Es un tipo de dato de 32 bits, como el int, pero permite manejar n\u00fameros com coma flotante. Por ejemplo <code>16,4</code> o <code>1879223,45</code>. Estos n\u00fameros son los que usualmente se conocen como \u201cdecimales\u201d.</p> <p>Este tipo de dato tiene una precisi\u00f3n simple, esto es algo que veremos m\u00e1s adelante, pero por el momento alcanza con saber que no debe ser utilizado si vamos a necesitar n\u00fameros con alta precisi\u00f3n (es decir, lo podemos usar para aplicaciones gr\u00e1ficas o videojuegos, pero no para informaci\u00f3n cient\u00edfica o financiera).</p>"},{"location":"clase_1/#double-coma-flotante-doble-o-real-largo","title":"double (coma flotante doble o \u2018real largo\u2019)","text":"<p>En este caso es un tipo de dato de 64 bits, como el long, pero permite manejar n\u00fameros con coma flotante, como el float.</p> <p>Las diferencias entre el float y double son: - El rango num\u00e9rico (es el doble)  - La precisi\u00f3n (es, tambi\u00e9n, el doble)   Al ser un n\u00famero decimal su \u201cexactitud\u201d depende de la cantidad de d\u00edgitos que puede manejar despu\u00e9s de la coma. Por eso,   el tipo de dato \u201cdouble\u201d tiene el doble de precisi\u00f3n que el \u201cfloat\u201d.</p>"},{"location":"clase_1/#boolean-booleano-anglicismo-o-logico","title":"boolean (booleano -anglicismo- o l\u00f3gico)","text":"<p>Este es un tipo de dato de un bit que representa verdadero (en ingl\u00e9s \u201ctrue\u201d) o falso (en ingl\u00e9s \u201cfalse\u201d) (que tambi\u00e9n podr\u00eda ser s\u00ed o no, 1 o 0, lleno o vac\u00edo, etc\u2026).</p> <p>Se los llama as\u00ed en honor al fil\u00f3sofo y matem\u00e1tico ingl\u00e9s George Boole. </p>"},{"location":"clase_1/#char-caracter-o-simbolo","title":"char (car\u00e1cter o s\u00edmbolo)","text":"<p>Es un tipo de dato que representa un car\u00e1cter Unicode de 16 bits. Se utiliza mucho el tipo de dato char para manejar un s\u00edmbolo o una letra (\u00a1que es en \u00faltima instancia un s\u00edmbolo!) y no un fragmento de texto.</p>"},{"location":"clase_1/#string-cadena-de-texto","title":"String (cadena de texto)","text":"<p>Este tipo de dato lo ponemos como primitivo \u00a1pero no lo es! Lo incluimos aqu\u00ed porque es tan utilizado como los primitivos.</p> <p>En principio hay que observar que empieza con una may\u00fascula. En casi todos los lenguajes de programaci\u00f3n orientada a objetos esto tiene un significado importante. Por ahora podemos decir que cuando tenemos que trabajar con textos (frases o palabras), usamos este tipo de dato.</p> Tipos primitivos de JAVA Tipo Traducci\u00f3n Memoria utilizada Rango de valores Breve descripci\u00f3n byte Byte u Octeto (raro) 1 byte (8 bits) de -128 a 127 Representaci\u00f3n de un n\u00famero entero positivo o negativo. short Entero corto 2 byte (16 bits) de -32.768 a 32.767 Representaci\u00f3n de un entero positivo o negativo con rango corto. int Entero 4 byte (32 bits) de -2<sup>31</sup> a 2<sup>31</sup>-1 Representaci\u00f3n de un entero est\u00e1ndar. long Entero largo 8 byte (64 bits) de -2<sup>63</sup> a 2<sup>63</sup>-1 Representaci\u00f3n de un entero de rango ampliado. float Coma flotante o Real 4 byte (32 bits) de -10<sup>32</sup> a 10<sup>32</sup> Representaci\u00f3n de un n\u00famero real est\u00e1ndar. La precisi\u00f3n del dato contenido var\u00eda en funci\u00f3n del tama\u00f1o del n\u00famero: la precisi\u00f3n se amplia con n\u00fameros m\u00e1s pr\u00f3ximos a 0 y disminuye cuanto m\u00e1s se aleja del mismo. double Real largo 8 byte (64 bits) de -10<sup>300</sup> a 10<sup>300</sup> Representaci\u00f3n de un n\u00famero real con mucha precisi\u00f3n. char Car\u00e1cter 2 byte (16 bits) de \u2018\\u0000\u2019 a \u2018\\uffff\u2019 Car\u00e1cter o s\u00edmbolo. Recordar que para utilizar una \u201ccadena de texto\u201d se debe usar la clase String. boolean Booleano o L\u00f3gico 1 bit true - false Representa una \u2018posici\u00f3n\u2019 l\u00f3gica con dos valores posibles: verdadero (true) o falso (false)"},{"location":"clase_1/#operadores","title":"Operadores","text":"<p>[Yo sigo ac\u00e1 ma\u00f1ana]</p> <ol> <li> <p>\u201cHola, mundo\u201d en inform\u00e1tica es un programa que muestra el texto \u00abHola, mundo\u00bb en un dispositivo de visualizaci\u00f3n, en la mayor\u00eda de los casos la pantalla de un monitor. Este programa suele ser usado como introducci\u00f3n al estudio de un lenguaje de programaci\u00f3n, siendo un primer ejercicio t\u00edpico considerado fundamental desde el punto de vista did\u00e1ctico.\u00a0\u21a9</p> </li> <li> <p>En todos los elementos de Java vamos a ver que estos reciben nombres en ingl\u00e9s. Junto a cada tipo vamos a poner su traducci\u00f3n en castellano para entenderlos, pero cuando los utilicemos siempre tendr\u00e1 que ser con su nombre ingl\u00e9s.\u00a0\u21a9</p> </li> </ol>"}]}